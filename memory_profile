INFO:FACE01:FACE01の推奨動作環境を満たしているかシステムチェックを実行します
INFO:FACE01:- Python version check
INFO:FACE01:  [OK] 3.8.10 (default, Mar 15 2022, 12:22:08) 
[GCC 9.4.0]
INFO:FACE01:- CPU check
INFO:FACE01:  [OK] 3.20GHz
INFO:FACE01:  [OK] 4core
INFO:FACE01:- Memory check
INFO:FACE01:  [OK] 16GByte
INFO:FACE01:- CUDA devices check
INFO:FACE01:  [OK] cuda devices: 1
INFO:FACE01:- Dlib build check: CUDA
INFO:FACE01:  [OK] DLIB_USE_CUDA: True
INFO:FACE01:- Dlib build check: BLAS, LAPACK
INFO:FACE01:  [OK] DLIB_USE_BLAS, LAPACK: True
INFO:FACE01:- VRAM check
INFO:FACE01:  [OK] VRAM: 6GByte
INFO:FACE01:  [OK] GPU device: NVIDIA GeForce GTX 1660 Ti
INFO:FACE01:  ** System check: Done **

INFO:face01lib/load_priset_image:npKnown.npz を読み込みます
args_dict.__sizeof__(): 2256
Filename: /home/terms/bin/FACE01/FACE01.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
  1007    341.9 MiB    341.9 MiB           1   @profile()
  1008                                         def face_encoding_process(args_dict, frame_datas_array):
  1009                                             """frame_datas_arrayの定義
  1010                                             person_data = {'name': name, 'pict':filename,  'date':date, 'location':(top,right,bottom,left), 'percentage_and_symbol': percentage_and_symbol}
  1011                                             person_data_list.append(person_data)
  1012                                             frame_datas = {'img':resized_frame, 'face_location_list':face_location_list, 'overlay': overlay, 'person_data_list': person_data_list}
  1013                                             frame_datas_array.append(frame_datas)
  1014                                             """
  1015    341.9 MiB      0.0 MiB           1       face_encodings = []
  1016    341.9 MiB      0.0 MiB           1       for frame_data in frame_datas_array:
  1017    341.9 MiB      0.0 MiB           1           resized_frame = frame_data["img"]
  1018    341.9 MiB      0.0 MiB           1           face_location_list = frame_data["face_location_list"]  # [(139, 190, 257, 72)]
  1019    341.9 MiB      0.0 MiB           1           if len(face_location_list) == 0:
  1020                                                     return face_encodings, frame_datas_array
  1021    341.9 MiB      0.0 MiB           1           elif len(face_location_list) > 0:
  1022                                                     # 顔ロケーションからエンコーディングを求める
  1023    341.9 MiB      0.0 MiB           1               if args_dict["use_mediapipe"] == True and  args_dict["person_frame_face_encoding"] == True:
  1024                                                         """FIX
  1025                                                         人数分を繰り返し処理しているので時間がかかる。
  1026                                                         dlibは一つの画像に複数の座標を与えて一度に処理をする。
  1027                                                         なので各person_frameをくっつけて一つの画像にすれば処理時間は短くなる。
  1028                                                             numpy.hstack(tup)[source]
  1029                                                             Stack arrays in sequence horizontally (column wise).
  1030                                                             https://numpy.org/doc/stable/reference/generated/numpy.hstack.html
  1031                                                         """
  1032                                                         concatenate_face_location_list, concatenate_person_frame = \
  1033                                                             return_concatenate_location_and_frame(resized_frame, face_location_list)
  1034                                                         face_encodings = faceapi.face_encodings(concatenate_person_frame, concatenate_face_location_list, args_dict["jitters"], args_dict["model"])
  1035    341.9 MiB      0.0 MiB           1               elif args_dict["use_mediapipe"] == True and  args_dict["person_frame_face_encoding"] == False:
  1036   1912.3 MiB   1570.4 MiB           1                   face_encodings = faceapi.face_encodings(resized_frame, face_location_list, args_dict["jitters"], args_dict["model"])
  1037                                                     elif args_dict["use_mediapipe"] == False and  args_dict["person_frame_face_encoding"] == True:
  1038                                                         logger_warning("\n---------------------------------")
  1039                                                         logger_warning("config.ini:")
  1040                                                         logger_warning("mediapipe = False  の場合 person_frame_face_encoding = True  には出来ません")
  1041                                                         logger_warning("システム管理者へ連絡の後、設定を変更してください")
  1042                                                         logger_warning("処理を終了します")
  1043                                                         logger_warning("---------------------------------")
  1044                                                         quit()
  1045                                                     elif args_dict["use_mediapipe"] == False and args_dict["person_frame_face_encoding"] == False:
  1046                                                         face_encodings = faceapi.face_encodings(resized_frame, face_location_list, args_dict["jitters"], args_dict["model"])
  1047   1912.3 MiB      0.0 MiB           1           return face_encodings, frame_datas_array


modified_frame_list: 72
Filename: /home/terms/bin/FACE01/FACE01.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
  1050   1912.3 MiB   1912.3 MiB           1   @profile()
  1051                                         def frame_post_processing(args_dict, face_encodings, frame_datas_array):
  1052                                             """frame_datas_arrayの定義
  1053                                             person_data = {'name': name, 'pict':filename,  'date':date, 'location':(top,right,bottom,left), 'percentage_and_symbol': percentage_and_symbol}
  1054                                             person_data_list.append(person_data)
  1055                                             frame_datas = {'img':resized_frame, 'face_location_list':face_location_list, 'overlay': overlay, 'person_data_list': person_data_list}
  1056                                             frame_datas_array.append(frame_datas)
  1057                                             """
  1058   1912.3 MiB      0.0 MiB           1       face_names = []
  1059   1912.3 MiB      0.0 MiB           1       face_location_list = []
  1060   1912.3 MiB      0.0 MiB           1       number_of_crops = 0
  1061   1912.3 MiB      0.0 MiB           1       filename = ''
  1062   1912.3 MiB      0.0 MiB           1       debug_frame_turn_count = 0
  1063   1912.3 MiB      0.0 MiB           1       modified_frame_list = []
  1064                                         
  1065   1916.1 MiB      0.0 MiB           2       for frame_data in frame_datas_array:
  1066                                                 """DEBUG"""
  1067                                                 # debug_frame_turn_count += 1; print('*******',debug_frame_turn_count, '周目*******')
  1068   1912.3 MiB      0.0 MiB           1           if "face_location_list" not in frame_data:
  1069                                                     if args_dict["headless"] == False:
  1070                                                         # 半透明処理（後半）_1frameに対して1回
  1071                                                         if args_dict["show_overlay"]==True:
  1072                                                             cv2.addWeighted(frame_data["overlay"], global_memory["alpha"], frame_data["img"], 1-global_memory["alpha"], 0, frame_data["img"])
  1073                                                     continue
  1074                                         
  1075   1912.3 MiB      0.0 MiB           1           resized_frame = frame_data["img"]
  1076   1912.3 MiB      0.0 MiB           1           face_location_list = frame_data["face_location_list"]
  1077   1912.3 MiB      0.0 MiB           1           overlay = frame_data["overlay"]
  1078   1912.3 MiB      0.0 MiB           1           person_data_list = frame_data["person_data_list"]
  1079   1912.3 MiB      0.0 MiB           1           date = datetime.datetime.now().strftime("%Y,%m,%d,%H,%M,%S,%f")
  1080                                         
  1081                                                 # 名前リスト作成
  1082   1912.3 MiB      0.0 MiB           3           for face_encoding in face_encodings:
  1083                                                     # Initialize name, matches (Inner frame)
  1084   1912.3 MiB      0.0 MiB           2               name = "Unknown"
  1085   1912.3 MiB      0.0 MiB           2               matches = check_compare_faces(args_dict["known_face_encodings"], face_encoding, args_dict["tolerance"])
  1086                                                     # 名前リスト(face_names)生成
  1087   1912.3 MiB      0.0 MiB           2               face_names = return_face_names(args_dict, face_names, face_encoding,  matches, name)
  1088                                         
  1089                                                 # face_location_listについて繰り返し処理→frame_datas_array作成
  1090   1912.3 MiB      0.0 MiB           1           number_of_people = 0  # 人数。計算上0人から始める。draw_default_face()で使用する
  1091   1916.1 MiB      0.0 MiB           3           for (top, right, bottom, left), name in zip(face_location_list, face_names):
  1092   1914.9 MiB      0.0 MiB           2               person_data = defaultdict(int)
  1093   1914.9 MiB      0.0 MiB           2               if name == 'Unknown':
  1094                                                         percentage_and_symbol: str = ''
  1095                                                         dis: str = ''
  1096                                                         p: float = 1.0
  1097                                                     else:  # nameが誰かの名前の場合
  1098                                                         distance: str
  1099   1914.9 MiB      0.0 MiB           2                   name, distance = name.split(':')
  1100                                                         # パーセンテージの算出
  1101   1914.9 MiB      0.0 MiB           2                   dis = str(round(float(distance), 2))
  1102   1914.9 MiB      0.0 MiB           2                   p = float(distance)
  1103                                                         # return_percentage(p)
  1104   1914.9 MiB      0.0 MiB           2                   percentage = return_percentage(p)
  1105   1914.9 MiB      0.0 MiB           2                   percentage = round(percentage, 1)
  1106   1914.9 MiB      0.0 MiB           2                   percentage_and_symbol = str(percentage) + '%'
  1107                                                         # ファイル名を最初のアンダーバーで区切る（アンダーバーは複数なのでmaxsplit = 1）
  1108   1914.9 MiB      0.0 MiB           2                   try:
  1109   1914.9 MiB      0.0 MiB           2                       name, _ = name.split('_', maxsplit = 1)
  1110                                                         except:
  1111                                                             """TODO
  1112                                                             logger warn level"""
  1113                                                             sg.popup_error('ファイル名に異常が見つかりました',name,'NAME_default.png あるいはNAME_001.png (001部分は001からはじまる連番)にしてください','noFaceフォルダに移動します')
  1114                                                             move(name, './noFace/')
  1115                                                             return
  1116                                         
  1117                                         
  1118                                                     # クロップ画像保存
  1119   1914.9 MiB      0.0 MiB           2               if args_dict["crop_face_image"]==True:
  1120   1914.9 MiB      0.0 MiB           2                   if args_dict["frequency_crop_image"] < number_of_crops:
  1121                                                             pil_img_obj_rgb = pil_img_rgb_instance(resized_frame)
  1122                                                             filename,number_of_crops, frequency_crop_image = \
  1123                                                                 make_crop_face_image(name, dis, pil_img_obj_rgb, top, left, right, bottom, number_of_crops, args_dict["frequency_crop_image"])
  1124                                                             number_of_crops = 0
  1125                                                         else:
  1126   1914.9 MiB      0.0 MiB           2                       number_of_crops += 1
  1127                                         
  1128                                                     # 描画系
  1129   1914.9 MiB      0.0 MiB           2               if args_dict["headless"] == False:
  1130                                                         # デフォルト顔画像の描画
  1131   1914.9 MiB      0.0 MiB           2                   if p <= args_dict["tolerance"]:  # ディスタンスpがtolerance以下の場合
  1132   1914.9 MiB      0.0 MiB           2                       if args_dict["default_face_image_draw"] == True:
  1133   1914.9 MiB      0.0 MiB           2                           resized_frame = draw_default_face(args_dict, name, resized_frame, number_of_people)
  1134   1914.9 MiB      0.0 MiB           2                           number_of_people += 1  # 何人目か
  1135                                                                 """DEBUG"""
  1136                                                                 # frame_imshow_for_debug(resized_frame)
  1137                                         
  1138                                                         # ピンクまたは白の四角形描画
  1139   1914.9 MiB      0.0 MiB           2                   if args_dict["rectangle"] == True:
  1140                                                             if name == 'Unknown':  # プリセット顔画像に対応する顔画像がなかった場合
  1141                                                                 resized_frame = draw_pink_rectangle(resized_frame, top,bottom,left,right)
  1142                                                             else:  # プリセット顔画像に対応する顔画像があった場合
  1143                                                                 resized_frame = draw_white_rectangle(args_dict["rectangle"], resized_frame, top, left, right, bottom)
  1144                                                             
  1145                                                         # パーセンテージ描画
  1146   1914.9 MiB      0.0 MiB           2                   if args_dict["show_percentage"]==True:
  1147   1914.9 MiB      0.0 MiB           2                       resized_frame = display_percentage(percentage_and_symbol,resized_frame, p, left, right, bottom, args_dict["tolerance"])
  1148                                                             """DEBUG"""
  1149                                                             # frame_imshow_for_debug(resized_frame)
  1150                                         
  1151                                                         # 名前表示と名前用四角形の描画
  1152   1914.9 MiB      0.0 MiB           2                   if args_dict["show_name"]==True:
  1153   1914.9 MiB      0.0 MiB           2                       resized_frame = draw_rectangle_for_name(name,resized_frame, left, right,bottom)
  1154   1914.9 MiB      0.0 MiB           2                       pil_img_obj= Image.fromarray(resized_frame)
  1155   1916.1 MiB      3.8 MiB           2                       resized_frame = draw_text_for_name(left,right,bottom,name, p,args_dict["tolerance"],pil_img_obj)
  1156                                                             """DEBUG"""
  1157                                                             # frame_imshow_for_debug(resized_frame)
  1158                                         
  1159                                                         # target_rectangleの描画
  1160   1916.1 MiB      0.0 MiB           2                   if args_dict["target_rectangle"] == True:
  1161   1916.1 MiB      0.0 MiB           2                       resized_frame = draw_target_rectangle(args_dict["rect01_png"], resized_frame,top,bottom,left,right,name)
  1162                                                             """DEBUG"""
  1163                                                             # frame_imshow_for_debug(resized_frame)
  1164                                         
  1165                                                         """1.3.06でボトムエリア描画は廃止予定
  1166                                                         if args_dict["bottom_area"] == True:
  1167                                                             resized_frame = draw_bottom_area_rectangle(name,args_dict["bottom_area"], args_dict["set_height"], args_dict["set_width"], resized_frame)
  1168                                         
  1169                                                         # bottom_area中の描画
  1170                                                         if args_dict["bottom_area"]==True:
  1171                                                             unregistered_face_image, resized_frame = draw_bottom_area(args_dict, name,resized_frame)
  1172                                                             # name等描画
  1173                                                             inner_bottom_area_char_left = 200
  1174                                                             inner_bottom_area_char_top = args_dict["set_height"] + 30
  1175                                                             draw  =  make_draw_object(resized_frame)
  1176                                                             draw_text_in_bottom_area(draw, inner_bottom_area_char_left, inner_bottom_area_char_top,name,percentage_and_symbol,date)
  1177                                                             resized_frame = convert_pil_img_to_ndarray(pil_img_obj)
  1178                                                         """
  1179                                         
  1180   1916.1 MiB      0.0 MiB           2               person_data = {'name': name, 'pict':filename,  'date':date, 'location':(top,right,bottom,left), 'percentage_and_symbol': percentage_and_symbol}
  1181   1916.1 MiB      0.0 MiB           2               person_data_list.append(person_data)
  1182                                                 # End for (top, right, bottom, left), name in zip(face_location_list, face_names)
  1183                                         
  1184                                                 # _1frameに対して1回
  1185   1916.1 MiB      0.0 MiB           1           if args_dict["headless"] == False:
  1186   1916.1 MiB      0.0 MiB           1               frame_datas = {'img':resized_frame, 'face_location_list':face_location_list, 'overlay': overlay, 'person_data_list': person_data_list}
  1187                                                     """DEBUG"""
  1188                                                     # frame_imshow_for_debug(resized_frame)
  1189                                                     # frame_datas_array.append(frame_datas)
  1190   1916.1 MiB      0.0 MiB           1               modified_frame_list.append(frame_datas)
  1191                                         
  1192                                                 elif args_dict["headless"] == True:
  1193                                                     frame_datas = {'img':'no-data_img', 'face_location_list':face_location_list, 'overlay': overlay, 'person_data_list': person_data_list}  # TypeError: list indices must be integers or slices, not str -> img
  1194                                                     # frame_datas_array.append(frame_datas)
  1195                                                     modified_frame_list.append(frame_datas)
  1196                                                 else:
  1197                                                     frame_datas = {'img':'no-data_img', 'face_location_list':face_location_list, 'overlay': overlay, 'person_data_list': 'no-data_person_data_list'} 
  1198                                                     # frame_datas_array.append(frame_datas)
  1199                                                     modified_frame_list.append(frame_datas)
  1200                                         
  1201   1916.1 MiB      0.0 MiB           1           if args_dict["headless"] == False:
  1202                                                     # 半透明処理（後半）_1frameに対して1回
  1203   1916.1 MiB      0.0 MiB           1               if args_dict["show_overlay"]==True:
  1204                                                         # cv2.addWeighted(overlay, global_memory["alpha"], resized_frame, 1-global_memory["alpha"], 0, resized_frame)
  1205   1916.1 MiB      0.0 MiB           2                   for modified_frame in modified_frame_list:
  1206   1916.1 MiB      0.0 MiB           1                       cv2.addWeighted(modified_frame["overlay"], global_memory["alpha"], modified_frame["img"], 1-global_memory["alpha"], 0, modified_frame["img"])
  1207                                                         # """DEBUG"""
  1208                                                         # frame_imshow_for_debug(resized_frame)
  1209                                                 
  1210                                             # return frame_datas
  1211   1916.1 MiB      0.0 MiB           1       print(f"modified_frame_list: {modified_frame_list.__sizeof__()}")
  1212   1916.1 MiB      0.0 MiB           1       return modified_frame_list
  1213                                         
  1214                                             """機能停止
  1215                                             # yield出力ブロック ===================================
  1216                                             ## パイプ出力機構も含む
  1217                                             ## TODO: frame_datas_arrayから値を取り出す処理に変えること
  1218                                             if not frame_datas == None:
  1219                                                 if output_frame_data == True:  ## pipe出力時
  1220                                                     # frame_datas['stream'] = resized_frame
  1221                                                     # yield frame_datas
  1222                                                     pass
  1223                                                 elif output_frame_data == False:  ## 通常使用時
  1224                                                     frame_datas = {'name': name, 'pict':filename,  'date':date, 'img':resized_frame, 'location':(top,right,bottom,left), 'percentage_and_symbol': percentage_and_symbol}
  1225                                                     frame_datas_array.append(frame_datas)
  1226                                                     yield frame_datas_array
  1227                                                     # sys.stdout.buffer.write(frame_datas['stream'])  ## 'stream'を出力する
  1228                                                     # print(type(resized_frame))  ## <class 'numpy.ndarray'>
  1229                                                     # print(type(frame_datas['stream']))  ## <class 'numpy.ndarray'>
  1230                                         
  1231                                                     # cv2.imshow('FACE01', frame_datas['stream'])
  1232                                                     # if cv2.waitKey(1) & 0xFF == ord('q'):
  1233                                                     #     break
  1234                                             # =====================================================
  1235                                         
  1236                                             # パイプ使用時の必要情報を表示 ========
  1237                                             if print_property==True:
  1238                                                 print('fps: ', fps)
  1239                                                 print('frame shape: ', resized_frame.shape)  ## (450, 800, 3)
  1240                                                 print('dtype: ', resized_frame.dtype)  ## uint8
  1241                                                 print('frame size: ', resized_frame.size) ## 1080000←450*800*3
  1242                                                 exit()
  1243                                             # =====================================
  1244                                             """


exec_times: 9
メモリプロファイリング中
メモリプロファイリング中
Filename: /home/terms/bin/FACE01/FACE01.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
  1007   1936.6 MiB   1936.6 MiB           1   @profile()
  1008                                         def face_encoding_process(args_dict, frame_datas_array):
  1009                                             """frame_datas_arrayの定義
  1010                                             person_data = {'name': name, 'pict':filename,  'date':date, 'location':(top,right,bottom,left), 'percentage_and_symbol': percentage_and_symbol}
  1011                                             person_data_list.append(person_data)
  1012                                             frame_datas = {'img':resized_frame, 'face_location_list':face_location_list, 'overlay': overlay, 'person_data_list': person_data_list}
  1013                                             frame_datas_array.append(frame_datas)
  1014                                             """
  1015   1936.6 MiB      0.0 MiB           1       face_encodings = []
  1016   1936.6 MiB      0.0 MiB           1       for frame_data in frame_datas_array:
  1017   1936.6 MiB      0.0 MiB           1           resized_frame = frame_data["img"]
  1018   1936.6 MiB      0.0 MiB           1           face_location_list = frame_data["face_location_list"]  # [(139, 190, 257, 72)]
  1019   1936.6 MiB      0.0 MiB           1           if len(face_location_list) == 0:
  1020                                                     return face_encodings, frame_datas_array
  1021   1936.6 MiB      0.0 MiB           1           elif len(face_location_list) > 0:
  1022                                                     # 顔ロケーションからエンコーディングを求める
  1023   1936.6 MiB      0.0 MiB           1               if args_dict["use_mediapipe"] == True and  args_dict["person_frame_face_encoding"] == True:
  1024                                                         """FIX
  1025                                                         人数分を繰り返し処理しているので時間がかかる。
  1026                                                         dlibは一つの画像に複数の座標を与えて一度に処理をする。
  1027                                                         なので各person_frameをくっつけて一つの画像にすれば処理時間は短くなる。
  1028                                                             numpy.hstack(tup)[source]
  1029                                                             Stack arrays in sequence horizontally (column wise).
  1030                                                             https://numpy.org/doc/stable/reference/generated/numpy.hstack.html
  1031                                                         """
  1032                                                         concatenate_face_location_list, concatenate_person_frame = \
  1033                                                             return_concatenate_location_and_frame(resized_frame, face_location_list)
  1034                                                         face_encodings = faceapi.face_encodings(concatenate_person_frame, concatenate_face_location_list, args_dict["jitters"], args_dict["model"])
  1035   1936.6 MiB      0.0 MiB           1               elif args_dict["use_mediapipe"] == True and  args_dict["person_frame_face_encoding"] == False:
  1036   1936.6 MiB      0.0 MiB           1                   face_encodings = faceapi.face_encodings(resized_frame, face_location_list, args_dict["jitters"], args_dict["model"])
  1037                                                     elif args_dict["use_mediapipe"] == False and  args_dict["person_frame_face_encoding"] == True:
  1038                                                         logger_warning("\n---------------------------------")
  1039                                                         logger_warning("config.ini:")
  1040                                                         logger_warning("mediapipe = False  の場合 person_frame_face_encoding = True  には出来ません")
  1041                                                         logger_warning("システム管理者へ連絡の後、設定を変更してください")
  1042                                                         logger_warning("処理を終了します")
  1043                                                         logger_warning("---------------------------------")
  1044                                                         quit()
  1045                                                     elif args_dict["use_mediapipe"] == False and args_dict["person_frame_face_encoding"] == False:
  1046                                                         face_encodings = faceapi.face_encodings(resized_frame, face_location_list, args_dict["jitters"], args_dict["model"])
  1047   1936.6 MiB      0.0 MiB           1           return face_encodings, frame_datas_array


modified_frame_list: 72
Filename: /home/terms/bin/FACE01/FACE01.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
  1050   1936.6 MiB   1936.6 MiB           1   @profile()
  1051                                         def frame_post_processing(args_dict, face_encodings, frame_datas_array):
  1052                                             """frame_datas_arrayの定義
  1053                                             person_data = {'name': name, 'pict':filename,  'date':date, 'location':(top,right,bottom,left), 'percentage_and_symbol': percentage_and_symbol}
  1054                                             person_data_list.append(person_data)
  1055                                             frame_datas = {'img':resized_frame, 'face_location_list':face_location_list, 'overlay': overlay, 'person_data_list': person_data_list}
  1056                                             frame_datas_array.append(frame_datas)
  1057                                             """
  1058   1936.6 MiB      0.0 MiB           1       face_names = []
  1059   1936.6 MiB      0.0 MiB           1       face_location_list = []
  1060   1936.6 MiB      0.0 MiB           1       number_of_crops = 0
  1061   1936.6 MiB      0.0 MiB           1       filename = ''
  1062   1936.6 MiB      0.0 MiB           1       debug_frame_turn_count = 0
  1063   1936.6 MiB      0.0 MiB           1       modified_frame_list = []
  1064                                         
  1065   1943.0 MiB      0.0 MiB           2       for frame_data in frame_datas_array:
  1066                                                 """DEBUG"""
  1067                                                 # debug_frame_turn_count += 1; print('*******',debug_frame_turn_count, '周目*******')
  1068   1936.6 MiB      0.0 MiB           1           if "face_location_list" not in frame_data:
  1069                                                     if args_dict["headless"] == False:
  1070                                                         # 半透明処理（後半）_1frameに対して1回
  1071                                                         if args_dict["show_overlay"]==True:
  1072                                                             cv2.addWeighted(frame_data["overlay"], global_memory["alpha"], frame_data["img"], 1-global_memory["alpha"], 0, frame_data["img"])
  1073                                                     continue
  1074                                         
  1075   1936.6 MiB      0.0 MiB           1           resized_frame = frame_data["img"]
  1076   1936.6 MiB      0.0 MiB           1           face_location_list = frame_data["face_location_list"]
  1077   1936.6 MiB      0.0 MiB           1           overlay = frame_data["overlay"]
  1078   1936.6 MiB      0.0 MiB           1           person_data_list = frame_data["person_data_list"]
  1079   1936.6 MiB      0.0 MiB           1           date = datetime.datetime.now().strftime("%Y,%m,%d,%H,%M,%S,%f")
  1080                                         
  1081                                                 # 名前リスト作成
  1082   1936.6 MiB      0.0 MiB           3           for face_encoding in face_encodings:
  1083                                                     # Initialize name, matches (Inner frame)
  1084   1936.6 MiB      0.0 MiB           2               name = "Unknown"
  1085   1936.6 MiB      0.0 MiB           2               matches = check_compare_faces(args_dict["known_face_encodings"], face_encoding, args_dict["tolerance"])
  1086                                                     # 名前リスト(face_names)生成
  1087   1936.6 MiB      0.0 MiB           2               face_names = return_face_names(args_dict, face_names, face_encoding,  matches, name)
  1088                                         
  1089                                                 # face_location_listについて繰り返し処理→frame_datas_array作成
  1090   1936.6 MiB      0.0 MiB           1           number_of_people = 0  # 人数。計算上0人から始める。draw_default_face()で使用する
  1091   1943.0 MiB      0.0 MiB           3           for (top, right, bottom, left), name in zip(face_location_list, face_names):
  1092   1940.9 MiB      0.0 MiB           2               person_data = defaultdict(int)
  1093   1940.9 MiB      0.0 MiB           2               if name == 'Unknown':
  1094                                                         percentage_and_symbol: str = ''
  1095                                                         dis: str = ''
  1096                                                         p: float = 1.0
  1097                                                     else:  # nameが誰かの名前の場合
  1098                                                         distance: str
  1099   1940.9 MiB      0.0 MiB           2                   name, distance = name.split(':')
  1100                                                         # パーセンテージの算出
  1101   1940.9 MiB      0.0 MiB           2                   dis = str(round(float(distance), 2))
  1102   1940.9 MiB      0.0 MiB           2                   p = float(distance)
  1103                                                         # return_percentage(p)
  1104   1940.9 MiB      0.0 MiB           2                   percentage = return_percentage(p)
  1105   1940.9 MiB      0.0 MiB           2                   percentage = round(percentage, 1)
  1106   1940.9 MiB      0.0 MiB           2                   percentage_and_symbol = str(percentage) + '%'
  1107                                                         # ファイル名を最初のアンダーバーで区切る（アンダーバーは複数なのでmaxsplit = 1）
  1108   1940.9 MiB      0.0 MiB           2                   try:
  1109   1940.9 MiB      0.0 MiB           2                       name, _ = name.split('_', maxsplit = 1)
  1110                                                         except:
  1111                                                             """TODO
  1112                                                             logger warn level"""
  1113                                                             sg.popup_error('ファイル名に異常が見つかりました',name,'NAME_default.png あるいはNAME_001.png (001部分は001からはじまる連番)にしてください','noFaceフォルダに移動します')
  1114                                                             move(name, './noFace/')
  1115                                                             return
  1116                                         
  1117                                         
  1118                                                     # クロップ画像保存
  1119   1940.9 MiB      0.0 MiB           2               if args_dict["crop_face_image"]==True:
  1120   1940.9 MiB      0.0 MiB           2                   if args_dict["frequency_crop_image"] < number_of_crops:
  1121                                                             pil_img_obj_rgb = pil_img_rgb_instance(resized_frame)
  1122                                                             filename,number_of_crops, frequency_crop_image = \
  1123                                                                 make_crop_face_image(name, dis, pil_img_obj_rgb, top, left, right, bottom, number_of_crops, args_dict["frequency_crop_image"])
  1124                                                             number_of_crops = 0
  1125                                                         else:
  1126   1940.9 MiB      0.0 MiB           2                       number_of_crops += 1
  1127                                         
  1128                                                     # 描画系
  1129   1940.9 MiB      0.0 MiB           2               if args_dict["headless"] == False:
  1130                                                         # デフォルト顔画像の描画
  1131   1940.9 MiB      0.0 MiB           2                   if p <= args_dict["tolerance"]:  # ディスタンスpがtolerance以下の場合
  1132   1940.9 MiB      0.0 MiB           2                       if args_dict["default_face_image_draw"] == True:
  1133   1940.9 MiB      0.0 MiB           2                           resized_frame = draw_default_face(args_dict, name, resized_frame, number_of_people)
  1134   1940.9 MiB      0.0 MiB           2                           number_of_people += 1  # 何人目か
  1135                                                                 """DEBUG"""
  1136                                                                 # frame_imshow_for_debug(resized_frame)
  1137                                         
  1138                                                         # ピンクまたは白の四角形描画
  1139   1940.9 MiB      0.0 MiB           2                   if args_dict["rectangle"] == True:
  1140                                                             if name == 'Unknown':  # プリセット顔画像に対応する顔画像がなかった場合
  1141                                                                 resized_frame = draw_pink_rectangle(resized_frame, top,bottom,left,right)
  1142                                                             else:  # プリセット顔画像に対応する顔画像があった場合
  1143                                                                 resized_frame = draw_white_rectangle(args_dict["rectangle"], resized_frame, top, left, right, bottom)
  1144                                                             
  1145                                                         # パーセンテージ描画
  1146   1940.9 MiB      0.0 MiB           2                   if args_dict["show_percentage"]==True:
  1147   1940.9 MiB      0.0 MiB           2                       resized_frame = display_percentage(percentage_and_symbol,resized_frame, p, left, right, bottom, args_dict["tolerance"])
  1148                                                             """DEBUG"""
  1149                                                             # frame_imshow_for_debug(resized_frame)
  1150                                         
  1151                                                         # 名前表示と名前用四角形の描画
  1152   1940.9 MiB      0.0 MiB           2                   if args_dict["show_name"]==True:
  1153   1940.9 MiB      0.0 MiB           2                       resized_frame = draw_rectangle_for_name(name,resized_frame, left, right,bottom)
  1154   1941.2 MiB      1.0 MiB           2                       pil_img_obj= Image.fromarray(resized_frame)
  1155   1943.0 MiB      5.4 MiB           2                       resized_frame = draw_text_for_name(left,right,bottom,name, p,args_dict["tolerance"],pil_img_obj)
  1156                                                             """DEBUG"""
  1157                                                             # frame_imshow_for_debug(resized_frame)
  1158                                         
  1159                                                         # target_rectangleの描画
  1160   1943.0 MiB      0.0 MiB           2                   if args_dict["target_rectangle"] == True:
  1161   1943.0 MiB      0.0 MiB           2                       resized_frame = draw_target_rectangle(args_dict["rect01_png"], resized_frame,top,bottom,left,right,name)
  1162                                                             """DEBUG"""
  1163                                                             # frame_imshow_for_debug(resized_frame)
  1164                                         
  1165                                                         """1.3.06でボトムエリア描画は廃止予定
  1166                                                         if args_dict["bottom_area"] == True:
  1167                                                             resized_frame = draw_bottom_area_rectangle(name,args_dict["bottom_area"], args_dict["set_height"], args_dict["set_width"], resized_frame)
  1168                                         
  1169                                                         # bottom_area中の描画
  1170                                                         if args_dict["bottom_area"]==True:
  1171                                                             unregistered_face_image, resized_frame = draw_bottom_area(args_dict, name,resized_frame)
  1172                                                             # name等描画
  1173                                                             inner_bottom_area_char_left = 200
  1174                                                             inner_bottom_area_char_top = args_dict["set_height"] + 30
  1175                                                             draw  =  make_draw_object(resized_frame)
  1176                                                             draw_text_in_bottom_area(draw, inner_bottom_area_char_left, inner_bottom_area_char_top,name,percentage_and_symbol,date)
  1177                                                             resized_frame = convert_pil_img_to_ndarray(pil_img_obj)
  1178                                                         """
  1179                                         
  1180   1943.0 MiB      0.0 MiB           2               person_data = {'name': name, 'pict':filename,  'date':date, 'location':(top,right,bottom,left), 'percentage_and_symbol': percentage_and_symbol}
  1181   1943.0 MiB      0.0 MiB           2               person_data_list.append(person_data)
  1182                                                 # End for (top, right, bottom, left), name in zip(face_location_list, face_names)
  1183                                         
  1184                                                 # _1frameに対して1回
  1185   1943.0 MiB      0.0 MiB           1           if args_dict["headless"] == False:
  1186   1943.0 MiB      0.0 MiB           1               frame_datas = {'img':resized_frame, 'face_location_list':face_location_list, 'overlay': overlay, 'person_data_list': person_data_list}
  1187                                                     """DEBUG"""
  1188                                                     # frame_imshow_for_debug(resized_frame)
  1189                                                     # frame_datas_array.append(frame_datas)
  1190   1943.0 MiB      0.0 MiB           1               modified_frame_list.append(frame_datas)
  1191                                         
  1192                                                 elif args_dict["headless"] == True:
  1193                                                     frame_datas = {'img':'no-data_img', 'face_location_list':face_location_list, 'overlay': overlay, 'person_data_list': person_data_list}  # TypeError: list indices must be integers or slices, not str -> img
  1194                                                     # frame_datas_array.append(frame_datas)
  1195                                                     modified_frame_list.append(frame_datas)
  1196                                                 else:
  1197                                                     frame_datas = {'img':'no-data_img', 'face_location_list':face_location_list, 'overlay': overlay, 'person_data_list': 'no-data_person_data_list'} 
  1198                                                     # frame_datas_array.append(frame_datas)
  1199                                                     modified_frame_list.append(frame_datas)
  1200                                         
  1201   1943.0 MiB      0.0 MiB           1           if args_dict["headless"] == False:
  1202                                                     # 半透明処理（後半）_1frameに対して1回
  1203   1943.0 MiB      0.0 MiB           1               if args_dict["show_overlay"]==True:
  1204                                                         # cv2.addWeighted(overlay, global_memory["alpha"], resized_frame, 1-global_memory["alpha"], 0, resized_frame)
  1205   1943.0 MiB      0.0 MiB           2                   for modified_frame in modified_frame_list:
  1206   1943.0 MiB      0.0 MiB           1                       cv2.addWeighted(modified_frame["overlay"], global_memory["alpha"], modified_frame["img"], 1-global_memory["alpha"], 0, modified_frame["img"])
  1207                                                         # """DEBUG"""
  1208                                                         # frame_imshow_for_debug(resized_frame)
  1209                                                 
  1210                                             # return frame_datas
  1211   1943.0 MiB      0.0 MiB           1       print(f"modified_frame_list: {modified_frame_list.__sizeof__()}")
  1212   1943.0 MiB      0.0 MiB           1       return modified_frame_list
  1213                                         
  1214                                             """機能停止
  1215                                             # yield出力ブロック ===================================
  1216                                             ## パイプ出力機構も含む
  1217                                             ## TODO: frame_datas_arrayから値を取り出す処理に変えること
  1218                                             if not frame_datas == None:
  1219                                                 if output_frame_data == True:  ## pipe出力時
  1220                                                     # frame_datas['stream'] = resized_frame
  1221                                                     # yield frame_datas
  1222                                                     pass
  1223                                                 elif output_frame_data == False:  ## 通常使用時
  1224                                                     frame_datas = {'name': name, 'pict':filename,  'date':date, 'img':resized_frame, 'location':(top,right,bottom,left), 'percentage_and_symbol': percentage_and_symbol}
  1225                                                     frame_datas_array.append(frame_datas)
  1226                                                     yield frame_datas_array
  1227                                                     # sys.stdout.buffer.write(frame_datas['stream'])  ## 'stream'を出力する
  1228                                                     # print(type(resized_frame))  ## <class 'numpy.ndarray'>
  1229                                                     # print(type(frame_datas['stream']))  ## <class 'numpy.ndarray'>
  1230                                         
  1231                                                     # cv2.imshow('FACE01', frame_datas['stream'])
  1232                                                     # if cv2.waitKey(1) & 0xFF == ord('q'):
  1233                                                     #     break
  1234                                             # =====================================================
  1235                                         
  1236                                             # パイプ使用時の必要情報を表示 ========
  1237                                             if print_property==True:
  1238                                                 print('fps: ', fps)
  1239                                                 print('frame shape: ', resized_frame.shape)  ## (450, 800, 3)
  1240                                                 print('dtype: ', resized_frame.dtype)  ## uint8
  1241                                                 print('frame size: ', resized_frame.size) ## 1080000←450*800*3
  1242                                                 exit()
  1243                                             # =====================================
  1244                                             """


exec_times: 8
メモリプロファイリング中
メモリプロファイリング中
Filename: /home/terms/bin/FACE01/FACE01.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
  1007   1947.4 MiB   1947.4 MiB           1   @profile()
  1008                                         def face_encoding_process(args_dict, frame_datas_array):
  1009                                             """frame_datas_arrayの定義
  1010                                             person_data = {'name': name, 'pict':filename,  'date':date, 'location':(top,right,bottom,left), 'percentage_and_symbol': percentage_and_symbol}
  1011                                             person_data_list.append(person_data)
  1012                                             frame_datas = {'img':resized_frame, 'face_location_list':face_location_list, 'overlay': overlay, 'person_data_list': person_data_list}
  1013                                             frame_datas_array.append(frame_datas)
  1014                                             """
  1015   1947.4 MiB      0.0 MiB           1       face_encodings = []
  1016   1947.4 MiB      0.0 MiB           1       for frame_data in frame_datas_array:
  1017   1947.4 MiB      0.0 MiB           1           resized_frame = frame_data["img"]
  1018   1947.4 MiB      0.0 MiB           1           face_location_list = frame_data["face_location_list"]  # [(139, 190, 257, 72)]
  1019   1947.4 MiB      0.0 MiB           1           if len(face_location_list) == 0:
  1020                                                     return face_encodings, frame_datas_array
  1021   1947.4 MiB      0.0 MiB           1           elif len(face_location_list) > 0:
  1022                                                     # 顔ロケーションからエンコーディングを求める
  1023   1947.4 MiB      0.0 MiB           1               if args_dict["use_mediapipe"] == True and  args_dict["person_frame_face_encoding"] == True:
  1024                                                         """FIX
  1025                                                         人数分を繰り返し処理しているので時間がかかる。
  1026                                                         dlibは一つの画像に複数の座標を与えて一度に処理をする。
  1027                                                         なので各person_frameをくっつけて一つの画像にすれば処理時間は短くなる。
  1028                                                             numpy.hstack(tup)[source]
  1029                                                             Stack arrays in sequence horizontally (column wise).
  1030                                                             https://numpy.org/doc/stable/reference/generated/numpy.hstack.html
  1031                                                         """
  1032                                                         concatenate_face_location_list, concatenate_person_frame = \
  1033                                                             return_concatenate_location_and_frame(resized_frame, face_location_list)
  1034                                                         face_encodings = faceapi.face_encodings(concatenate_person_frame, concatenate_face_location_list, args_dict["jitters"], args_dict["model"])
  1035   1947.4 MiB      0.0 MiB           1               elif args_dict["use_mediapipe"] == True and  args_dict["person_frame_face_encoding"] == False:
  1036   1947.4 MiB      0.0 MiB           1                   face_encodings = faceapi.face_encodings(resized_frame, face_location_list, args_dict["jitters"], args_dict["model"])
  1037                                                     elif args_dict["use_mediapipe"] == False and  args_dict["person_frame_face_encoding"] == True:
  1038                                                         logger_warning("\n---------------------------------")
  1039                                                         logger_warning("config.ini:")
  1040                                                         logger_warning("mediapipe = False  の場合 person_frame_face_encoding = True  には出来ません")
  1041                                                         logger_warning("システム管理者へ連絡の後、設定を変更してください")
  1042                                                         logger_warning("処理を終了します")
  1043                                                         logger_warning("---------------------------------")
  1044                                                         quit()
  1045                                                     elif args_dict["use_mediapipe"] == False and args_dict["person_frame_face_encoding"] == False:
  1046                                                         face_encodings = faceapi.face_encodings(resized_frame, face_location_list, args_dict["jitters"], args_dict["model"])
  1047   1947.4 MiB      0.0 MiB           1           return face_encodings, frame_datas_array


modified_frame_list: 72
Filename: /home/terms/bin/FACE01/FACE01.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
  1050   1947.4 MiB   1947.4 MiB           1   @profile()
  1051                                         def frame_post_processing(args_dict, face_encodings, frame_datas_array):
  1052                                             """frame_datas_arrayの定義
  1053                                             person_data = {'name': name, 'pict':filename,  'date':date, 'location':(top,right,bottom,left), 'percentage_and_symbol': percentage_and_symbol}
  1054                                             person_data_list.append(person_data)
  1055                                             frame_datas = {'img':resized_frame, 'face_location_list':face_location_list, 'overlay': overlay, 'person_data_list': person_data_list}
  1056                                             frame_datas_array.append(frame_datas)
  1057                                             """
  1058   1947.4 MiB      0.0 MiB           1       face_names = []
  1059   1947.4 MiB      0.0 MiB           1       face_location_list = []
  1060   1947.4 MiB      0.0 MiB           1       number_of_crops = 0
  1061   1947.4 MiB      0.0 MiB           1       filename = ''
  1062   1947.4 MiB      0.0 MiB           1       debug_frame_turn_count = 0
  1063   1947.4 MiB      0.0 MiB           1       modified_frame_list = []
  1064                                         
  1065   1950.7 MiB      0.0 MiB           2       for frame_data in frame_datas_array:
  1066                                                 """DEBUG"""
  1067                                                 # debug_frame_turn_count += 1; print('*******',debug_frame_turn_count, '周目*******')
  1068   1947.4 MiB      0.0 MiB           1           if "face_location_list" not in frame_data:
  1069                                                     if args_dict["headless"] == False:
  1070                                                         # 半透明処理（後半）_1frameに対して1回
  1071                                                         if args_dict["show_overlay"]==True:
  1072                                                             cv2.addWeighted(frame_data["overlay"], global_memory["alpha"], frame_data["img"], 1-global_memory["alpha"], 0, frame_data["img"])
  1073                                                     continue
  1074                                         
  1075   1947.4 MiB      0.0 MiB           1           resized_frame = frame_data["img"]
  1076   1947.4 MiB      0.0 MiB           1           face_location_list = frame_data["face_location_list"]
  1077   1947.4 MiB      0.0 MiB           1           overlay = frame_data["overlay"]
  1078   1947.4 MiB      0.0 MiB           1           person_data_list = frame_data["person_data_list"]
  1079   1947.4 MiB      0.0 MiB           1           date = datetime.datetime.now().strftime("%Y,%m,%d,%H,%M,%S,%f")
  1080                                         
  1081                                                 # 名前リスト作成
  1082   1947.4 MiB      0.0 MiB           3           for face_encoding in face_encodings:
  1083                                                     # Initialize name, matches (Inner frame)
  1084   1947.4 MiB      0.0 MiB           2               name = "Unknown"
  1085   1947.4 MiB      0.0 MiB           2               matches = check_compare_faces(args_dict["known_face_encodings"], face_encoding, args_dict["tolerance"])
  1086                                                     # 名前リスト(face_names)生成
  1087   1947.4 MiB      0.0 MiB           2               face_names = return_face_names(args_dict, face_names, face_encoding,  matches, name)
  1088                                         
  1089                                                 # face_location_listについて繰り返し処理→frame_datas_array作成
  1090   1947.4 MiB      0.0 MiB           1           number_of_people = 0  # 人数。計算上0人から始める。draw_default_face()で使用する
  1091   1950.7 MiB      0.0 MiB           3           for (top, right, bottom, left), name in zip(face_location_list, face_names):
  1092   1949.2 MiB      0.0 MiB           2               person_data = defaultdict(int)
  1093   1949.2 MiB      0.0 MiB           2               if name == 'Unknown':
  1094                                                         percentage_and_symbol: str = ''
  1095                                                         dis: str = ''
  1096                                                         p: float = 1.0
  1097                                                     else:  # nameが誰かの名前の場合
  1098                                                         distance: str
  1099   1949.2 MiB      0.0 MiB           2                   name, distance = name.split(':')
  1100                                                         # パーセンテージの算出
  1101   1949.2 MiB      0.0 MiB           2                   dis = str(round(float(distance), 2))
  1102   1949.2 MiB      0.0 MiB           2                   p = float(distance)
  1103                                                         # return_percentage(p)
  1104   1949.2 MiB      0.0 MiB           2                   percentage = return_percentage(p)
  1105   1949.2 MiB      0.0 MiB           2                   percentage = round(percentage, 1)
  1106   1949.2 MiB      0.0 MiB           2                   percentage_and_symbol = str(percentage) + '%'
  1107                                                         # ファイル名を最初のアンダーバーで区切る（アンダーバーは複数なのでmaxsplit = 1）
  1108   1949.2 MiB      0.0 MiB           2                   try:
  1109   1949.2 MiB      0.0 MiB           2                       name, _ = name.split('_', maxsplit = 1)
  1110                                                         except:
  1111                                                             """TODO
  1112                                                             logger warn level"""
  1113                                                             sg.popup_error('ファイル名に異常が見つかりました',name,'NAME_default.png あるいはNAME_001.png (001部分は001からはじまる連番)にしてください','noFaceフォルダに移動します')
  1114                                                             move(name, './noFace/')
  1115                                                             return
  1116                                         
  1117                                         
  1118                                                     # クロップ画像保存
  1119   1949.2 MiB      0.0 MiB           2               if args_dict["crop_face_image"]==True:
  1120   1949.2 MiB      0.0 MiB           2                   if args_dict["frequency_crop_image"] < number_of_crops:
  1121                                                             pil_img_obj_rgb = pil_img_rgb_instance(resized_frame)
  1122                                                             filename,number_of_crops, frequency_crop_image = \
  1123                                                                 make_crop_face_image(name, dis, pil_img_obj_rgb, top, left, right, bottom, number_of_crops, args_dict["frequency_crop_image"])
  1124                                                             number_of_crops = 0
  1125                                                         else:
  1126   1949.2 MiB      0.0 MiB           2                       number_of_crops += 1
  1127                                         
  1128                                                     # 描画系
  1129   1949.2 MiB      0.0 MiB           2               if args_dict["headless"] == False:
  1130                                                         # デフォルト顔画像の描画
  1131   1949.2 MiB      0.0 MiB           2                   if p <= args_dict["tolerance"]:  # ディスタンスpがtolerance以下の場合
  1132   1949.2 MiB      0.0 MiB           2                       if args_dict["default_face_image_draw"] == True:
  1133   1949.2 MiB      0.0 MiB           2                           resized_frame = draw_default_face(args_dict, name, resized_frame, number_of_people)
  1134   1949.2 MiB      0.0 MiB           2                           number_of_people += 1  # 何人目か
  1135                                                                 """DEBUG"""
  1136                                                                 # frame_imshow_for_debug(resized_frame)
  1137                                         
  1138                                                         # ピンクまたは白の四角形描画
  1139   1949.2 MiB      0.0 MiB           2                   if args_dict["rectangle"] == True:
  1140                                                             if name == 'Unknown':  # プリセット顔画像に対応する顔画像がなかった場合
  1141                                                                 resized_frame = draw_pink_rectangle(resized_frame, top,bottom,left,right)
  1142                                                             else:  # プリセット顔画像に対応する顔画像があった場合
  1143                                                                 resized_frame = draw_white_rectangle(args_dict["rectangle"], resized_frame, top, left, right, bottom)
  1144                                                             
  1145                                                         # パーセンテージ描画
  1146   1949.2 MiB      0.0 MiB           2                   if args_dict["show_percentage"]==True:
  1147   1949.2 MiB      0.0 MiB           2                       resized_frame = display_percentage(percentage_and_symbol,resized_frame, p, left, right, bottom, args_dict["tolerance"])
  1148                                                             """DEBUG"""
  1149                                                             # frame_imshow_for_debug(resized_frame)
  1150                                         
  1151                                                         # 名前表示と名前用四角形の描画
  1152   1949.2 MiB      0.0 MiB           2                   if args_dict["show_name"]==True:
  1153   1949.2 MiB      0.0 MiB           2                       resized_frame = draw_rectangle_for_name(name,resized_frame, left, right,bottom)
  1154   1949.2 MiB      0.0 MiB           2                       pil_img_obj= Image.fromarray(resized_frame)
  1155   1950.7 MiB      3.3 MiB           2                       resized_frame = draw_text_for_name(left,right,bottom,name, p,args_dict["tolerance"],pil_img_obj)
  1156                                                             """DEBUG"""
  1157                                                             # frame_imshow_for_debug(resized_frame)
  1158                                         
  1159                                                         # target_rectangleの描画
  1160   1950.7 MiB      0.0 MiB           2                   if args_dict["target_rectangle"] == True:
  1161   1950.7 MiB      0.0 MiB           2                       resized_frame = draw_target_rectangle(args_dict["rect01_png"], resized_frame,top,bottom,left,right,name)
  1162                                                             """DEBUG"""
  1163                                                             # frame_imshow_for_debug(resized_frame)
  1164                                         
  1165                                                         """1.3.06でボトムエリア描画は廃止予定
  1166                                                         if args_dict["bottom_area"] == True:
  1167                                                             resized_frame = draw_bottom_area_rectangle(name,args_dict["bottom_area"], args_dict["set_height"], args_dict["set_width"], resized_frame)
  1168                                         
  1169                                                         # bottom_area中の描画
  1170                                                         if args_dict["bottom_area"]==True:
  1171                                                             unregistered_face_image, resized_frame = draw_bottom_area(args_dict, name,resized_frame)
  1172                                                             # name等描画
  1173                                                             inner_bottom_area_char_left = 200
  1174                                                             inner_bottom_area_char_top = args_dict["set_height"] + 30
  1175                                                             draw  =  make_draw_object(resized_frame)
  1176                                                             draw_text_in_bottom_area(draw, inner_bottom_area_char_left, inner_bottom_area_char_top,name,percentage_and_symbol,date)
  1177                                                             resized_frame = convert_pil_img_to_ndarray(pil_img_obj)
  1178                                                         """
  1179                                         
  1180   1950.7 MiB      0.0 MiB           2               person_data = {'name': name, 'pict':filename,  'date':date, 'location':(top,right,bottom,left), 'percentage_and_symbol': percentage_and_symbol}
  1181   1950.7 MiB      0.0 MiB           2               person_data_list.append(person_data)
  1182                                                 # End for (top, right, bottom, left), name in zip(face_location_list, face_names)
  1183                                         
  1184                                                 # _1frameに対して1回
  1185   1950.7 MiB      0.0 MiB           1           if args_dict["headless"] == False:
  1186   1950.7 MiB      0.0 MiB           1               frame_datas = {'img':resized_frame, 'face_location_list':face_location_list, 'overlay': overlay, 'person_data_list': person_data_list}
  1187                                                     """DEBUG"""
  1188                                                     # frame_imshow_for_debug(resized_frame)
  1189                                                     # frame_datas_array.append(frame_datas)
  1190   1950.7 MiB      0.0 MiB           1               modified_frame_list.append(frame_datas)
  1191                                         
  1192                                                 elif args_dict["headless"] == True:
  1193                                                     frame_datas = {'img':'no-data_img', 'face_location_list':face_location_list, 'overlay': overlay, 'person_data_list': person_data_list}  # TypeError: list indices must be integers or slices, not str -> img
  1194                                                     # frame_datas_array.append(frame_datas)
  1195                                                     modified_frame_list.append(frame_datas)
  1196                                                 else:
  1197                                                     frame_datas = {'img':'no-data_img', 'face_location_list':face_location_list, 'overlay': overlay, 'person_data_list': 'no-data_person_data_list'} 
  1198                                                     # frame_datas_array.append(frame_datas)
  1199                                                     modified_frame_list.append(frame_datas)
  1200                                         
  1201   1950.7 MiB      0.0 MiB           1           if args_dict["headless"] == False:
  1202                                                     # 半透明処理（後半）_1frameに対して1回
  1203   1950.7 MiB      0.0 MiB           1               if args_dict["show_overlay"]==True:
  1204                                                         # cv2.addWeighted(overlay, global_memory["alpha"], resized_frame, 1-global_memory["alpha"], 0, resized_frame)
  1205   1950.7 MiB      0.0 MiB           2                   for modified_frame in modified_frame_list:
  1206   1950.7 MiB      0.0 MiB           1                       cv2.addWeighted(modified_frame["overlay"], global_memory["alpha"], modified_frame["img"], 1-global_memory["alpha"], 0, modified_frame["img"])
  1207                                                         # """DEBUG"""
  1208                                                         # frame_imshow_for_debug(resized_frame)
  1209                                                 
  1210                                             # return frame_datas
  1211   1950.7 MiB      0.0 MiB           1       print(f"modified_frame_list: {modified_frame_list.__sizeof__()}")
  1212   1950.7 MiB      0.0 MiB           1       return modified_frame_list
  1213                                         
  1214                                             """機能停止
  1215                                             # yield出力ブロック ===================================
  1216                                             ## パイプ出力機構も含む
  1217                                             ## TODO: frame_datas_arrayから値を取り出す処理に変えること
  1218                                             if not frame_datas == None:
  1219                                                 if output_frame_data == True:  ## pipe出力時
  1220                                                     # frame_datas['stream'] = resized_frame
  1221                                                     # yield frame_datas
  1222                                                     pass
  1223                                                 elif output_frame_data == False:  ## 通常使用時
  1224                                                     frame_datas = {'name': name, 'pict':filename,  'date':date, 'img':resized_frame, 'location':(top,right,bottom,left), 'percentage_and_symbol': percentage_and_symbol}
  1225                                                     frame_datas_array.append(frame_datas)
  1226                                                     yield frame_datas_array
  1227                                                     # sys.stdout.buffer.write(frame_datas['stream'])  ## 'stream'を出力する
  1228                                                     # print(type(resized_frame))  ## <class 'numpy.ndarray'>
  1229                                                     # print(type(frame_datas['stream']))  ## <class 'numpy.ndarray'>
  1230                                         
  1231                                                     # cv2.imshow('FACE01', frame_datas['stream'])
  1232                                                     # if cv2.waitKey(1) & 0xFF == ord('q'):
  1233                                                     #     break
  1234                                             # =====================================================
  1235                                         
  1236                                             # パイプ使用時の必要情報を表示 ========
  1237                                             if print_property==True:
  1238                                                 print('fps: ', fps)
  1239                                                 print('frame shape: ', resized_frame.shape)  ## (450, 800, 3)
  1240                                                 print('dtype: ', resized_frame.dtype)  ## uint8
  1241                                                 print('frame size: ', resized_frame.size) ## 1080000←450*800*3
  1242                                                 exit()
  1243                                             # =====================================
  1244                                             """


exec_times: 7
メモリプロファイリング中
メモリプロファイリング中
Filename: /home/terms/bin/FACE01/FACE01.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
  1007   1955.3 MiB   1955.3 MiB           1   @profile()
  1008                                         def face_encoding_process(args_dict, frame_datas_array):
  1009                                             """frame_datas_arrayの定義
  1010                                             person_data = {'name': name, 'pict':filename,  'date':date, 'location':(top,right,bottom,left), 'percentage_and_symbol': percentage_and_symbol}
  1011                                             person_data_list.append(person_data)
  1012                                             frame_datas = {'img':resized_frame, 'face_location_list':face_location_list, 'overlay': overlay, 'person_data_list': person_data_list}
  1013                                             frame_datas_array.append(frame_datas)
  1014                                             """
  1015   1955.3 MiB      0.0 MiB           1       face_encodings = []
  1016   1955.3 MiB      0.0 MiB           1       for frame_data in frame_datas_array:
  1017   1955.3 MiB      0.0 MiB           1           resized_frame = frame_data["img"]
  1018   1955.3 MiB      0.0 MiB           1           face_location_list = frame_data["face_location_list"]  # [(139, 190, 257, 72)]
  1019   1955.3 MiB      0.0 MiB           1           if len(face_location_list) == 0:
  1020                                                     return face_encodings, frame_datas_array
  1021   1955.3 MiB      0.0 MiB           1           elif len(face_location_list) > 0:
  1022                                                     # 顔ロケーションからエンコーディングを求める
  1023   1955.3 MiB      0.0 MiB           1               if args_dict["use_mediapipe"] == True and  args_dict["person_frame_face_encoding"] == True:
  1024                                                         """FIX
  1025                                                         人数分を繰り返し処理しているので時間がかかる。
  1026                                                         dlibは一つの画像に複数の座標を与えて一度に処理をする。
  1027                                                         なので各person_frameをくっつけて一つの画像にすれば処理時間は短くなる。
  1028                                                             numpy.hstack(tup)[source]
  1029                                                             Stack arrays in sequence horizontally (column wise).
  1030                                                             https://numpy.org/doc/stable/reference/generated/numpy.hstack.html
  1031                                                         """
  1032                                                         concatenate_face_location_list, concatenate_person_frame = \
  1033                                                             return_concatenate_location_and_frame(resized_frame, face_location_list)
  1034                                                         face_encodings = faceapi.face_encodings(concatenate_person_frame, concatenate_face_location_list, args_dict["jitters"], args_dict["model"])
  1035   1955.3 MiB      0.0 MiB           1               elif args_dict["use_mediapipe"] == True and  args_dict["person_frame_face_encoding"] == False:
  1036   1955.3 MiB      0.0 MiB           1                   face_encodings = faceapi.face_encodings(resized_frame, face_location_list, args_dict["jitters"], args_dict["model"])
  1037                                                     elif args_dict["use_mediapipe"] == False and  args_dict["person_frame_face_encoding"] == True:
  1038                                                         logger_warning("\n---------------------------------")
  1039                                                         logger_warning("config.ini:")
  1040                                                         logger_warning("mediapipe = False  の場合 person_frame_face_encoding = True  には出来ません")
  1041                                                         logger_warning("システム管理者へ連絡の後、設定を変更してください")
  1042                                                         logger_warning("処理を終了します")
  1043                                                         logger_warning("---------------------------------")
  1044                                                         quit()
  1045                                                     elif args_dict["use_mediapipe"] == False and args_dict["person_frame_face_encoding"] == False:
  1046                                                         face_encodings = faceapi.face_encodings(resized_frame, face_location_list, args_dict["jitters"], args_dict["model"])
  1047   1955.3 MiB      0.0 MiB           1           return face_encodings, frame_datas_array


modified_frame_list: 72
Filename: /home/terms/bin/FACE01/FACE01.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
  1050   1955.3 MiB   1955.3 MiB           1   @profile()
  1051                                         def frame_post_processing(args_dict, face_encodings, frame_datas_array):
  1052                                             """frame_datas_arrayの定義
  1053                                             person_data = {'name': name, 'pict':filename,  'date':date, 'location':(top,right,bottom,left), 'percentage_and_symbol': percentage_and_symbol}
  1054                                             person_data_list.append(person_data)
  1055                                             frame_datas = {'img':resized_frame, 'face_location_list':face_location_list, 'overlay': overlay, 'person_data_list': person_data_list}
  1056                                             frame_datas_array.append(frame_datas)
  1057                                             """
  1058   1955.3 MiB      0.0 MiB           1       face_names = []
  1059   1955.3 MiB      0.0 MiB           1       face_location_list = []
  1060   1955.3 MiB      0.0 MiB           1       number_of_crops = 0
  1061   1955.3 MiB      0.0 MiB           1       filename = ''
  1062   1955.3 MiB      0.0 MiB           1       debug_frame_turn_count = 0
  1063   1955.3 MiB      0.0 MiB           1       modified_frame_list = []
  1064                                         
  1065   1959.1 MiB      0.0 MiB           2       for frame_data in frame_datas_array:
  1066                                                 """DEBUG"""
  1067                                                 # debug_frame_turn_count += 1; print('*******',debug_frame_turn_count, '周目*******')
  1068   1955.3 MiB      0.0 MiB           1           if "face_location_list" not in frame_data:
  1069                                                     if args_dict["headless"] == False:
  1070                                                         # 半透明処理（後半）_1frameに対して1回
  1071                                                         if args_dict["show_overlay"]==True:
  1072                                                             cv2.addWeighted(frame_data["overlay"], global_memory["alpha"], frame_data["img"], 1-global_memory["alpha"], 0, frame_data["img"])
  1073                                                     continue
  1074                                         
  1075   1955.3 MiB      0.0 MiB           1           resized_frame = frame_data["img"]
  1076   1955.3 MiB      0.0 MiB           1           face_location_list = frame_data["face_location_list"]
  1077   1955.3 MiB      0.0 MiB           1           overlay = frame_data["overlay"]
  1078   1955.3 MiB      0.0 MiB           1           person_data_list = frame_data["person_data_list"]
  1079   1955.3 MiB      0.0 MiB           1           date = datetime.datetime.now().strftime("%Y,%m,%d,%H,%M,%S,%f")
  1080                                         
  1081                                                 # 名前リスト作成
  1082   1955.3 MiB      0.0 MiB           3           for face_encoding in face_encodings:
  1083                                                     # Initialize name, matches (Inner frame)
  1084   1955.3 MiB      0.0 MiB           2               name = "Unknown"
  1085   1955.3 MiB      0.0 MiB           2               matches = check_compare_faces(args_dict["known_face_encodings"], face_encoding, args_dict["tolerance"])
  1086                                                     # 名前リスト(face_names)生成
  1087   1955.3 MiB      0.0 MiB           2               face_names = return_face_names(args_dict, face_names, face_encoding,  matches, name)
  1088                                         
  1089                                                 # face_location_listについて繰り返し処理→frame_datas_array作成
  1090   1955.3 MiB      0.0 MiB           1           number_of_people = 0  # 人数。計算上0人から始める。draw_default_face()で使用する
  1091   1959.1 MiB      0.0 MiB           3           for (top, right, bottom, left), name in zip(face_location_list, face_names):
  1092   1957.0 MiB      0.0 MiB           2               person_data = defaultdict(int)
  1093   1957.0 MiB      0.0 MiB           2               if name == 'Unknown':
  1094                                                         percentage_and_symbol: str = ''
  1095                                                         dis: str = ''
  1096                                                         p: float = 1.0
  1097                                                     else:  # nameが誰かの名前の場合
  1098                                                         distance: str
  1099   1957.0 MiB      0.0 MiB           2                   name, distance = name.split(':')
  1100                                                         # パーセンテージの算出
  1101   1957.0 MiB      0.0 MiB           2                   dis = str(round(float(distance), 2))
  1102   1957.0 MiB      0.0 MiB           2                   p = float(distance)
  1103                                                         # return_percentage(p)
  1104   1957.0 MiB      0.0 MiB           2                   percentage = return_percentage(p)
  1105   1957.0 MiB      0.0 MiB           2                   percentage = round(percentage, 1)
  1106   1957.0 MiB      0.0 MiB           2                   percentage_and_symbol = str(percentage) + '%'
  1107                                                         # ファイル名を最初のアンダーバーで区切る（アンダーバーは複数なのでmaxsplit = 1）
  1108   1957.0 MiB      0.0 MiB           2                   try:
  1109   1957.0 MiB      0.0 MiB           2                       name, _ = name.split('_', maxsplit = 1)
  1110                                                         except:
  1111                                                             """TODO
  1112                                                             logger warn level"""
  1113                                                             sg.popup_error('ファイル名に異常が見つかりました',name,'NAME_default.png あるいはNAME_001.png (001部分は001からはじまる連番)にしてください','noFaceフォルダに移動します')
  1114                                                             move(name, './noFace/')
  1115                                                             return
  1116                                         
  1117                                         
  1118                                                     # クロップ画像保存
  1119   1957.0 MiB      0.0 MiB           2               if args_dict["crop_face_image"]==True:
  1120   1957.0 MiB      0.0 MiB           2                   if args_dict["frequency_crop_image"] < number_of_crops:
  1121                                                             pil_img_obj_rgb = pil_img_rgb_instance(resized_frame)
  1122                                                             filename,number_of_crops, frequency_crop_image = \
  1123                                                                 make_crop_face_image(name, dis, pil_img_obj_rgb, top, left, right, bottom, number_of_crops, args_dict["frequency_crop_image"])
  1124                                                             number_of_crops = 0
  1125                                                         else:
  1126   1957.0 MiB      0.0 MiB           2                       number_of_crops += 1
  1127                                         
  1128                                                     # 描画系
  1129   1957.0 MiB      0.0 MiB           2               if args_dict["headless"] == False:
  1130                                                         # デフォルト顔画像の描画
  1131   1957.0 MiB      0.0 MiB           2                   if p <= args_dict["tolerance"]:  # ディスタンスpがtolerance以下の場合
  1132   1957.0 MiB      0.0 MiB           2                       if args_dict["default_face_image_draw"] == True:
  1133   1957.0 MiB      0.0 MiB           2                           resized_frame = draw_default_face(args_dict, name, resized_frame, number_of_people)
  1134   1957.0 MiB      0.0 MiB           2                           number_of_people += 1  # 何人目か
  1135                                                                 """DEBUG"""
  1136                                                                 # frame_imshow_for_debug(resized_frame)
  1137                                         
  1138                                                         # ピンクまたは白の四角形描画
  1139   1957.0 MiB      0.0 MiB           2                   if args_dict["rectangle"] == True:
  1140                                                             if name == 'Unknown':  # プリセット顔画像に対応する顔画像がなかった場合
  1141                                                                 resized_frame = draw_pink_rectangle(resized_frame, top,bottom,left,right)
  1142                                                             else:  # プリセット顔画像に対応する顔画像があった場合
  1143                                                                 resized_frame = draw_white_rectangle(args_dict["rectangle"], resized_frame, top, left, right, bottom)
  1144                                                             
  1145                                                         # パーセンテージ描画
  1146   1957.0 MiB      0.0 MiB           2                   if args_dict["show_percentage"]==True:
  1147   1957.0 MiB      0.0 MiB           2                       resized_frame = display_percentage(percentage_and_symbol,resized_frame, p, left, right, bottom, args_dict["tolerance"])
  1148                                                             """DEBUG"""
  1149                                                             # frame_imshow_for_debug(resized_frame)
  1150                                         
  1151                                                         # 名前表示と名前用四角形の描画
  1152   1957.0 MiB      0.0 MiB           2                   if args_dict["show_name"]==True:
  1153   1957.0 MiB      0.0 MiB           2                       resized_frame = draw_rectangle_for_name(name,resized_frame, left, right,bottom)
  1154   1957.5 MiB      0.5 MiB           2                       pil_img_obj= Image.fromarray(resized_frame)
  1155   1959.1 MiB      3.3 MiB           2                       resized_frame = draw_text_for_name(left,right,bottom,name, p,args_dict["tolerance"],pil_img_obj)
  1156                                                             """DEBUG"""
  1157                                                             # frame_imshow_for_debug(resized_frame)
  1158                                         
  1159                                                         # target_rectangleの描画
  1160   1959.1 MiB      0.0 MiB           2                   if args_dict["target_rectangle"] == True:
  1161   1959.1 MiB      0.0 MiB           2                       resized_frame = draw_target_rectangle(args_dict["rect01_png"], resized_frame,top,bottom,left,right,name)
  1162                                                             """DEBUG"""
  1163                                                             # frame_imshow_for_debug(resized_frame)
  1164                                         
  1165                                                         """1.3.06でボトムエリア描画は廃止予定
  1166                                                         if args_dict["bottom_area"] == True:
  1167                                                             resized_frame = draw_bottom_area_rectangle(name,args_dict["bottom_area"], args_dict["set_height"], args_dict["set_width"], resized_frame)
  1168                                         
  1169                                                         # bottom_area中の描画
  1170                                                         if args_dict["bottom_area"]==True:
  1171                                                             unregistered_face_image, resized_frame = draw_bottom_area(args_dict, name,resized_frame)
  1172                                                             # name等描画
  1173                                                             inner_bottom_area_char_left = 200
  1174                                                             inner_bottom_area_char_top = args_dict["set_height"] + 30
  1175                                                             draw  =  make_draw_object(resized_frame)
  1176                                                             draw_text_in_bottom_area(draw, inner_bottom_area_char_left, inner_bottom_area_char_top,name,percentage_and_symbol,date)
  1177                                                             resized_frame = convert_pil_img_to_ndarray(pil_img_obj)
  1178                                                         """
  1179                                         
  1180   1959.1 MiB      0.0 MiB           2               person_data = {'name': name, 'pict':filename,  'date':date, 'location':(top,right,bottom,left), 'percentage_and_symbol': percentage_and_symbol}
  1181   1959.1 MiB      0.0 MiB           2               person_data_list.append(person_data)
  1182                                                 # End for (top, right, bottom, left), name in zip(face_location_list, face_names)
  1183                                         
  1184                                                 # _1frameに対して1回
  1185   1959.1 MiB      0.0 MiB           1           if args_dict["headless"] == False:
  1186   1959.1 MiB      0.0 MiB           1               frame_datas = {'img':resized_frame, 'face_location_list':face_location_list, 'overlay': overlay, 'person_data_list': person_data_list}
  1187                                                     """DEBUG"""
  1188                                                     # frame_imshow_for_debug(resized_frame)
  1189                                                     # frame_datas_array.append(frame_datas)
  1190   1959.1 MiB      0.0 MiB           1               modified_frame_list.append(frame_datas)
  1191                                         
  1192                                                 elif args_dict["headless"] == True:
  1193                                                     frame_datas = {'img':'no-data_img', 'face_location_list':face_location_list, 'overlay': overlay, 'person_data_list': person_data_list}  # TypeError: list indices must be integers or slices, not str -> img
  1194                                                     # frame_datas_array.append(frame_datas)
  1195                                                     modified_frame_list.append(frame_datas)
  1196                                                 else:
  1197                                                     frame_datas = {'img':'no-data_img', 'face_location_list':face_location_list, 'overlay': overlay, 'person_data_list': 'no-data_person_data_list'} 
  1198                                                     # frame_datas_array.append(frame_datas)
  1199                                                     modified_frame_list.append(frame_datas)
  1200                                         
  1201   1959.1 MiB      0.0 MiB           1           if args_dict["headless"] == False:
  1202                                                     # 半透明処理（後半）_1frameに対して1回
  1203   1959.1 MiB      0.0 MiB           1               if args_dict["show_overlay"]==True:
  1204                                                         # cv2.addWeighted(overlay, global_memory["alpha"], resized_frame, 1-global_memory["alpha"], 0, resized_frame)
  1205   1959.1 MiB      0.0 MiB           2                   for modified_frame in modified_frame_list:
  1206   1959.1 MiB      0.0 MiB           1                       cv2.addWeighted(modified_frame["overlay"], global_memory["alpha"], modified_frame["img"], 1-global_memory["alpha"], 0, modified_frame["img"])
  1207                                                         # """DEBUG"""
  1208                                                         # frame_imshow_for_debug(resized_frame)
  1209                                                 
  1210                                             # return frame_datas
  1211   1959.1 MiB      0.0 MiB           1       print(f"modified_frame_list: {modified_frame_list.__sizeof__()}")
  1212   1959.1 MiB      0.0 MiB           1       return modified_frame_list
  1213                                         
  1214                                             """機能停止
  1215                                             # yield出力ブロック ===================================
  1216                                             ## パイプ出力機構も含む
  1217                                             ## TODO: frame_datas_arrayから値を取り出す処理に変えること
  1218                                             if not frame_datas == None:
  1219                                                 if output_frame_data == True:  ## pipe出力時
  1220                                                     # frame_datas['stream'] = resized_frame
  1221                                                     # yield frame_datas
  1222                                                     pass
  1223                                                 elif output_frame_data == False:  ## 通常使用時
  1224                                                     frame_datas = {'name': name, 'pict':filename,  'date':date, 'img':resized_frame, 'location':(top,right,bottom,left), 'percentage_and_symbol': percentage_and_symbol}
  1225                                                     frame_datas_array.append(frame_datas)
  1226                                                     yield frame_datas_array
  1227                                                     # sys.stdout.buffer.write(frame_datas['stream'])  ## 'stream'を出力する
  1228                                                     # print(type(resized_frame))  ## <class 'numpy.ndarray'>
  1229                                                     # print(type(frame_datas['stream']))  ## <class 'numpy.ndarray'>
  1230                                         
  1231                                                     # cv2.imshow('FACE01', frame_datas['stream'])
  1232                                                     # if cv2.waitKey(1) & 0xFF == ord('q'):
  1233                                                     #     break
  1234                                             # =====================================================
  1235                                         
  1236                                             # パイプ使用時の必要情報を表示 ========
  1237                                             if print_property==True:
  1238                                                 print('fps: ', fps)
  1239                                                 print('frame shape: ', resized_frame.shape)  ## (450, 800, 3)
  1240                                                 print('dtype: ', resized_frame.dtype)  ## uint8
  1241                                                 print('frame size: ', resized_frame.size) ## 1080000←450*800*3
  1242                                                 exit()
  1243                                             # =====================================
  1244                                             """


exec_times: 6
メモリプロファイリング中
メモリプロファイリング中
Filename: /home/terms/bin/FACE01/FACE01.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
  1007   1963.8 MiB   1963.8 MiB           1   @profile()
  1008                                         def face_encoding_process(args_dict, frame_datas_array):
  1009                                             """frame_datas_arrayの定義
  1010                                             person_data = {'name': name, 'pict':filename,  'date':date, 'location':(top,right,bottom,left), 'percentage_and_symbol': percentage_and_symbol}
  1011                                             person_data_list.append(person_data)
  1012                                             frame_datas = {'img':resized_frame, 'face_location_list':face_location_list, 'overlay': overlay, 'person_data_list': person_data_list}
  1013                                             frame_datas_array.append(frame_datas)
  1014                                             """
  1015   1963.8 MiB      0.0 MiB           1       face_encodings = []
  1016   1963.8 MiB      0.0 MiB           1       for frame_data in frame_datas_array:
  1017   1963.8 MiB      0.0 MiB           1           resized_frame = frame_data["img"]
  1018   1963.8 MiB      0.0 MiB           1           face_location_list = frame_data["face_location_list"]  # [(139, 190, 257, 72)]
  1019   1963.8 MiB      0.0 MiB           1           if len(face_location_list) == 0:
  1020                                                     return face_encodings, frame_datas_array
  1021   1963.8 MiB      0.0 MiB           1           elif len(face_location_list) > 0:
  1022                                                     # 顔ロケーションからエンコーディングを求める
  1023   1963.8 MiB      0.0 MiB           1               if args_dict["use_mediapipe"] == True and  args_dict["person_frame_face_encoding"] == True:
  1024                                                         """FIX
  1025                                                         人数分を繰り返し処理しているので時間がかかる。
  1026                                                         dlibは一つの画像に複数の座標を与えて一度に処理をする。
  1027                                                         なので各person_frameをくっつけて一つの画像にすれば処理時間は短くなる。
  1028                                                             numpy.hstack(tup)[source]
  1029                                                             Stack arrays in sequence horizontally (column wise).
  1030                                                             https://numpy.org/doc/stable/reference/generated/numpy.hstack.html
  1031                                                         """
  1032                                                         concatenate_face_location_list, concatenate_person_frame = \
  1033                                                             return_concatenate_location_and_frame(resized_frame, face_location_list)
  1034                                                         face_encodings = faceapi.face_encodings(concatenate_person_frame, concatenate_face_location_list, args_dict["jitters"], args_dict["model"])
  1035   1963.8 MiB      0.0 MiB           1               elif args_dict["use_mediapipe"] == True and  args_dict["person_frame_face_encoding"] == False:
  1036   1963.8 MiB      0.0 MiB           1                   face_encodings = faceapi.face_encodings(resized_frame, face_location_list, args_dict["jitters"], args_dict["model"])
  1037                                                     elif args_dict["use_mediapipe"] == False and  args_dict["person_frame_face_encoding"] == True:
  1038                                                         logger_warning("\n---------------------------------")
  1039                                                         logger_warning("config.ini:")
  1040                                                         logger_warning("mediapipe = False  の場合 person_frame_face_encoding = True  には出来ません")
  1041                                                         logger_warning("システム管理者へ連絡の後、設定を変更してください")
  1042                                                         logger_warning("処理を終了します")
  1043                                                         logger_warning("---------------------------------")
  1044                                                         quit()
  1045                                                     elif args_dict["use_mediapipe"] == False and args_dict["person_frame_face_encoding"] == False:
  1046                                                         face_encodings = faceapi.face_encodings(resized_frame, face_location_list, args_dict["jitters"], args_dict["model"])
  1047   1963.8 MiB      0.0 MiB           1           return face_encodings, frame_datas_array


modified_frame_list: 72
Filename: /home/terms/bin/FACE01/FACE01.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
  1050   1963.8 MiB   1963.8 MiB           1   @profile()
  1051                                         def frame_post_processing(args_dict, face_encodings, frame_datas_array):
  1052                                             """frame_datas_arrayの定義
  1053                                             person_data = {'name': name, 'pict':filename,  'date':date, 'location':(top,right,bottom,left), 'percentage_and_symbol': percentage_and_symbol}
  1054                                             person_data_list.append(person_data)
  1055                                             frame_datas = {'img':resized_frame, 'face_location_list':face_location_list, 'overlay': overlay, 'person_data_list': person_data_list}
  1056                                             frame_datas_array.append(frame_datas)
  1057                                             """
  1058   1963.8 MiB      0.0 MiB           1       face_names = []
  1059   1963.8 MiB      0.0 MiB           1       face_location_list = []
  1060   1963.8 MiB      0.0 MiB           1       number_of_crops = 0
  1061   1963.8 MiB      0.0 MiB           1       filename = ''
  1062   1963.8 MiB      0.0 MiB           1       debug_frame_turn_count = 0
  1063   1963.8 MiB      0.0 MiB           1       modified_frame_list = []
  1064                                         
  1065   1963.8 MiB      0.0 MiB           2       for frame_data in frame_datas_array:
  1066                                                 """DEBUG"""
  1067                                                 # debug_frame_turn_count += 1; print('*******',debug_frame_turn_count, '周目*******')
  1068   1963.8 MiB      0.0 MiB           1           if "face_location_list" not in frame_data:
  1069                                                     if args_dict["headless"] == False:
  1070                                                         # 半透明処理（後半）_1frameに対して1回
  1071                                                         if args_dict["show_overlay"]==True:
  1072                                                             cv2.addWeighted(frame_data["overlay"], global_memory["alpha"], frame_data["img"], 1-global_memory["alpha"], 0, frame_data["img"])
  1073                                                     continue
  1074                                         
  1075   1963.8 MiB      0.0 MiB           1           resized_frame = frame_data["img"]
  1076   1963.8 MiB      0.0 MiB           1           face_location_list = frame_data["face_location_list"]
  1077   1963.8 MiB      0.0 MiB           1           overlay = frame_data["overlay"]
  1078   1963.8 MiB      0.0 MiB           1           person_data_list = frame_data["person_data_list"]
  1079   1963.8 MiB      0.0 MiB           1           date = datetime.datetime.now().strftime("%Y,%m,%d,%H,%M,%S,%f")
  1080                                         
  1081                                                 # 名前リスト作成
  1082   1963.8 MiB      0.0 MiB           3           for face_encoding in face_encodings:
  1083                                                     # Initialize name, matches (Inner frame)
  1084   1963.8 MiB      0.0 MiB           2               name = "Unknown"
  1085   1963.8 MiB      0.0 MiB           2               matches = check_compare_faces(args_dict["known_face_encodings"], face_encoding, args_dict["tolerance"])
  1086                                                     # 名前リスト(face_names)生成
  1087   1963.8 MiB      0.0 MiB           2               face_names = return_face_names(args_dict, face_names, face_encoding,  matches, name)
  1088                                         
  1089                                                 # face_location_listについて繰り返し処理→frame_datas_array作成
  1090   1963.8 MiB      0.0 MiB           1           number_of_people = 0  # 人数。計算上0人から始める。draw_default_face()で使用する
  1091   1963.8 MiB      0.0 MiB           3           for (top, right, bottom, left), name in zip(face_location_list, face_names):
  1092   1963.8 MiB      0.0 MiB           2               person_data = defaultdict(int)
  1093   1963.8 MiB      0.0 MiB           2               if name == 'Unknown':
  1094                                                         percentage_and_symbol: str = ''
  1095                                                         dis: str = ''
  1096                                                         p: float = 1.0
  1097                                                     else:  # nameが誰かの名前の場合
  1098                                                         distance: str
  1099   1963.8 MiB      0.0 MiB           2                   name, distance = name.split(':')
  1100                                                         # パーセンテージの算出
  1101   1963.8 MiB      0.0 MiB           2                   dis = str(round(float(distance), 2))
  1102   1963.8 MiB      0.0 MiB           2                   p = float(distance)
  1103                                                         # return_percentage(p)
  1104   1963.8 MiB      0.0 MiB           2                   percentage = return_percentage(p)
  1105   1963.8 MiB      0.0 MiB           2                   percentage = round(percentage, 1)
  1106   1963.8 MiB      0.0 MiB           2                   percentage_and_symbol = str(percentage) + '%'
  1107                                                         # ファイル名を最初のアンダーバーで区切る（アンダーバーは複数なのでmaxsplit = 1）
  1108   1963.8 MiB      0.0 MiB           2                   try:
  1109   1963.8 MiB      0.0 MiB           2                       name, _ = name.split('_', maxsplit = 1)
  1110                                                         except:
  1111                                                             """TODO
  1112                                                             logger warn level"""
  1113                                                             sg.popup_error('ファイル名に異常が見つかりました',name,'NAME_default.png あるいはNAME_001.png (001部分は001からはじまる連番)にしてください','noFaceフォルダに移動します')
  1114                                                             move(name, './noFace/')
  1115                                                             return
  1116                                         
  1117                                         
  1118                                                     # クロップ画像保存
  1119   1963.8 MiB      0.0 MiB           2               if args_dict["crop_face_image"]==True:
  1120   1963.8 MiB      0.0 MiB           2                   if args_dict["frequency_crop_image"] < number_of_crops:
  1121                                                             pil_img_obj_rgb = pil_img_rgb_instance(resized_frame)
  1122                                                             filename,number_of_crops, frequency_crop_image = \
  1123                                                                 make_crop_face_image(name, dis, pil_img_obj_rgb, top, left, right, bottom, number_of_crops, args_dict["frequency_crop_image"])
  1124                                                             number_of_crops = 0
  1125                                                         else:
  1126   1963.8 MiB      0.0 MiB           2                       number_of_crops += 1
  1127                                         
  1128                                                     # 描画系
  1129   1963.8 MiB      0.0 MiB           2               if args_dict["headless"] == False:
  1130                                                         # デフォルト顔画像の描画
  1131   1963.8 MiB      0.0 MiB           2                   if p <= args_dict["tolerance"]:  # ディスタンスpがtolerance以下の場合
  1132   1963.8 MiB      0.0 MiB           2                       if args_dict["default_face_image_draw"] == True:
  1133   1963.8 MiB      0.0 MiB           2                           resized_frame = draw_default_face(args_dict, name, resized_frame, number_of_people)
  1134   1963.8 MiB      0.0 MiB           2                           number_of_people += 1  # 何人目か
  1135                                                                 """DEBUG"""
  1136                                                                 # frame_imshow_for_debug(resized_frame)
  1137                                         
  1138                                                         # ピンクまたは白の四角形描画
  1139   1963.8 MiB      0.0 MiB           2                   if args_dict["rectangle"] == True:
  1140                                                             if name == 'Unknown':  # プリセット顔画像に対応する顔画像がなかった場合
  1141                                                                 resized_frame = draw_pink_rectangle(resized_frame, top,bottom,left,right)
  1142                                                             else:  # プリセット顔画像に対応する顔画像があった場合
  1143                                                                 resized_frame = draw_white_rectangle(args_dict["rectangle"], resized_frame, top, left, right, bottom)
  1144                                                             
  1145                                                         # パーセンテージ描画
  1146   1963.8 MiB      0.0 MiB           2                   if args_dict["show_percentage"]==True:
  1147   1963.8 MiB      0.0 MiB           2                       resized_frame = display_percentage(percentage_and_symbol,resized_frame, p, left, right, bottom, args_dict["tolerance"])
  1148                                                             """DEBUG"""
  1149                                                             # frame_imshow_for_debug(resized_frame)
  1150                                         
  1151                                                         # 名前表示と名前用四角形の描画
  1152   1963.8 MiB      0.0 MiB           2                   if args_dict["show_name"]==True:
  1153   1963.8 MiB      0.0 MiB           2                       resized_frame = draw_rectangle_for_name(name,resized_frame, left, right,bottom)
  1154   1963.8 MiB      0.0 MiB           2                       pil_img_obj= Image.fromarray(resized_frame)
  1155   1963.8 MiB      0.1 MiB           2                       resized_frame = draw_text_for_name(left,right,bottom,name, p,args_dict["tolerance"],pil_img_obj)
  1156                                                             """DEBUG"""
  1157                                                             # frame_imshow_for_debug(resized_frame)
  1158                                         
  1159                                                         # target_rectangleの描画
  1160   1963.8 MiB      0.0 MiB           2                   if args_dict["target_rectangle"] == True:
  1161   1963.8 MiB      0.0 MiB           2                       resized_frame = draw_target_rectangle(args_dict["rect01_png"], resized_frame,top,bottom,left,right,name)
  1162                                                             """DEBUG"""
  1163                                                             # frame_imshow_for_debug(resized_frame)
  1164                                         
  1165                                                         """1.3.06でボトムエリア描画は廃止予定
  1166                                                         if args_dict["bottom_area"] == True:
  1167                                                             resized_frame = draw_bottom_area_rectangle(name,args_dict["bottom_area"], args_dict["set_height"], args_dict["set_width"], resized_frame)
  1168                                         
  1169                                                         # bottom_area中の描画
  1170                                                         if args_dict["bottom_area"]==True:
  1171                                                             unregistered_face_image, resized_frame = draw_bottom_area(args_dict, name,resized_frame)
  1172                                                             # name等描画
  1173                                                             inner_bottom_area_char_left = 200
  1174                                                             inner_bottom_area_char_top = args_dict["set_height"] + 30
  1175                                                             draw  =  make_draw_object(resized_frame)
  1176                                                             draw_text_in_bottom_area(draw, inner_bottom_area_char_left, inner_bottom_area_char_top,name,percentage_and_symbol,date)
  1177                                                             resized_frame = convert_pil_img_to_ndarray(pil_img_obj)
  1178                                                         """
  1179                                         
  1180   1963.8 MiB      0.0 MiB           2               person_data = {'name': name, 'pict':filename,  'date':date, 'location':(top,right,bottom,left), 'percentage_and_symbol': percentage_and_symbol}
  1181   1963.8 MiB      0.0 MiB           2               person_data_list.append(person_data)
  1182                                                 # End for (top, right, bottom, left), name in zip(face_location_list, face_names)
  1183                                         
  1184                                                 # _1frameに対して1回
  1185   1963.8 MiB      0.0 MiB           1           if args_dict["headless"] == False:
  1186   1963.8 MiB      0.0 MiB           1               frame_datas = {'img':resized_frame, 'face_location_list':face_location_list, 'overlay': overlay, 'person_data_list': person_data_list}
  1187                                                     """DEBUG"""
  1188                                                     # frame_imshow_for_debug(resized_frame)
  1189                                                     # frame_datas_array.append(frame_datas)
  1190   1963.8 MiB      0.0 MiB           1               modified_frame_list.append(frame_datas)
  1191                                         
  1192                                                 elif args_dict["headless"] == True:
  1193                                                     frame_datas = {'img':'no-data_img', 'face_location_list':face_location_list, 'overlay': overlay, 'person_data_list': person_data_list}  # TypeError: list indices must be integers or slices, not str -> img
  1194                                                     # frame_datas_array.append(frame_datas)
  1195                                                     modified_frame_list.append(frame_datas)
  1196                                                 else:
  1197                                                     frame_datas = {'img':'no-data_img', 'face_location_list':face_location_list, 'overlay': overlay, 'person_data_list': 'no-data_person_data_list'} 
  1198                                                     # frame_datas_array.append(frame_datas)
  1199                                                     modified_frame_list.append(frame_datas)
  1200                                         
  1201   1963.8 MiB      0.0 MiB           1           if args_dict["headless"] == False:
  1202                                                     # 半透明処理（後半）_1frameに対して1回
  1203   1963.8 MiB      0.0 MiB           1               if args_dict["show_overlay"]==True:
  1204                                                         # cv2.addWeighted(overlay, global_memory["alpha"], resized_frame, 1-global_memory["alpha"], 0, resized_frame)
  1205   1963.8 MiB      0.0 MiB           2                   for modified_frame in modified_frame_list:
  1206   1963.8 MiB      0.0 MiB           1                       cv2.addWeighted(modified_frame["overlay"], global_memory["alpha"], modified_frame["img"], 1-global_memory["alpha"], 0, modified_frame["img"])
  1207                                                         # """DEBUG"""
  1208                                                         # frame_imshow_for_debug(resized_frame)
  1209                                                 
  1210                                             # return frame_datas
  1211   1963.8 MiB      0.0 MiB           1       print(f"modified_frame_list: {modified_frame_list.__sizeof__()}")
  1212   1963.8 MiB      0.0 MiB           1       return modified_frame_list
  1213                                         
  1214                                             """機能停止
  1215                                             # yield出力ブロック ===================================
  1216                                             ## パイプ出力機構も含む
  1217                                             ## TODO: frame_datas_arrayから値を取り出す処理に変えること
  1218                                             if not frame_datas == None:
  1219                                                 if output_frame_data == True:  ## pipe出力時
  1220                                                     # frame_datas['stream'] = resized_frame
  1221                                                     # yield frame_datas
  1222                                                     pass
  1223                                                 elif output_frame_data == False:  ## 通常使用時
  1224                                                     frame_datas = {'name': name, 'pict':filename,  'date':date, 'img':resized_frame, 'location':(top,right,bottom,left), 'percentage_and_symbol': percentage_and_symbol}
  1225                                                     frame_datas_array.append(frame_datas)
  1226                                                     yield frame_datas_array
  1227                                                     # sys.stdout.buffer.write(frame_datas['stream'])  ## 'stream'を出力する
  1228                                                     # print(type(resized_frame))  ## <class 'numpy.ndarray'>
  1229                                                     # print(type(frame_datas['stream']))  ## <class 'numpy.ndarray'>
  1230                                         
  1231                                                     # cv2.imshow('FACE01', frame_datas['stream'])
  1232                                                     # if cv2.waitKey(1) & 0xFF == ord('q'):
  1233                                                     #     break
  1234                                             # =====================================================
  1235                                         
  1236                                             # パイプ使用時の必要情報を表示 ========
  1237                                             if print_property==True:
  1238                                                 print('fps: ', fps)
  1239                                                 print('frame shape: ', resized_frame.shape)  ## (450, 800, 3)
  1240                                                 print('dtype: ', resized_frame.dtype)  ## uint8
  1241                                                 print('frame size: ', resized_frame.size) ## 1080000←450*800*3
  1242                                                 exit()
  1243                                             # =====================================
  1244                                             """


exec_times: 5
メモリプロファイリング中
メモリプロファイリング中
Filename: /home/terms/bin/FACE01/FACE01.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
  1007   1968.4 MiB   1968.4 MiB           1   @profile()
  1008                                         def face_encoding_process(args_dict, frame_datas_array):
  1009                                             """frame_datas_arrayの定義
  1010                                             person_data = {'name': name, 'pict':filename,  'date':date, 'location':(top,right,bottom,left), 'percentage_and_symbol': percentage_and_symbol}
  1011                                             person_data_list.append(person_data)
  1012                                             frame_datas = {'img':resized_frame, 'face_location_list':face_location_list, 'overlay': overlay, 'person_data_list': person_data_list}
  1013                                             frame_datas_array.append(frame_datas)
  1014                                             """
  1015   1968.4 MiB      0.0 MiB           1       face_encodings = []
  1016   1968.4 MiB      0.0 MiB           1       for frame_data in frame_datas_array:
  1017   1968.4 MiB      0.0 MiB           1           resized_frame = frame_data["img"]
  1018   1968.4 MiB      0.0 MiB           1           face_location_list = frame_data["face_location_list"]  # [(139, 190, 257, 72)]
  1019   1968.4 MiB      0.0 MiB           1           if len(face_location_list) == 0:
  1020                                                     return face_encodings, frame_datas_array
  1021   1968.4 MiB      0.0 MiB           1           elif len(face_location_list) > 0:
  1022                                                     # 顔ロケーションからエンコーディングを求める
  1023   1968.4 MiB      0.0 MiB           1               if args_dict["use_mediapipe"] == True and  args_dict["person_frame_face_encoding"] == True:
  1024                                                         """FIX
  1025                                                         人数分を繰り返し処理しているので時間がかかる。
  1026                                                         dlibは一つの画像に複数の座標を与えて一度に処理をする。
  1027                                                         なので各person_frameをくっつけて一つの画像にすれば処理時間は短くなる。
  1028                                                             numpy.hstack(tup)[source]
  1029                                                             Stack arrays in sequence horizontally (column wise).
  1030                                                             https://numpy.org/doc/stable/reference/generated/numpy.hstack.html
  1031                                                         """
  1032                                                         concatenate_face_location_list, concatenate_person_frame = \
  1033                                                             return_concatenate_location_and_frame(resized_frame, face_location_list)
  1034                                                         face_encodings = faceapi.face_encodings(concatenate_person_frame, concatenate_face_location_list, args_dict["jitters"], args_dict["model"])
  1035   1968.4 MiB      0.0 MiB           1               elif args_dict["use_mediapipe"] == True and  args_dict["person_frame_face_encoding"] == False:
  1036   1968.4 MiB      0.0 MiB           1                   face_encodings = faceapi.face_encodings(resized_frame, face_location_list, args_dict["jitters"], args_dict["model"])
  1037                                                     elif args_dict["use_mediapipe"] == False and  args_dict["person_frame_face_encoding"] == True:
  1038                                                         logger_warning("\n---------------------------------")
  1039                                                         logger_warning("config.ini:")
  1040                                                         logger_warning("mediapipe = False  の場合 person_frame_face_encoding = True  には出来ません")
  1041                                                         logger_warning("システム管理者へ連絡の後、設定を変更してください")
  1042                                                         logger_warning("処理を終了します")
  1043                                                         logger_warning("---------------------------------")
  1044                                                         quit()
  1045                                                     elif args_dict["use_mediapipe"] == False and args_dict["person_frame_face_encoding"] == False:
  1046                                                         face_encodings = faceapi.face_encodings(resized_frame, face_location_list, args_dict["jitters"], args_dict["model"])
  1047   1968.4 MiB      0.0 MiB           1           return face_encodings, frame_datas_array


modified_frame_list: 72
Filename: /home/terms/bin/FACE01/FACE01.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
  1050   1968.4 MiB   1968.4 MiB           1   @profile()
  1051                                         def frame_post_processing(args_dict, face_encodings, frame_datas_array):
  1052                                             """frame_datas_arrayの定義
  1053                                             person_data = {'name': name, 'pict':filename,  'date':date, 'location':(top,right,bottom,left), 'percentage_and_symbol': percentage_and_symbol}
  1054                                             person_data_list.append(person_data)
  1055                                             frame_datas = {'img':resized_frame, 'face_location_list':face_location_list, 'overlay': overlay, 'person_data_list': person_data_list}
  1056                                             frame_datas_array.append(frame_datas)
  1057                                             """
  1058   1968.4 MiB      0.0 MiB           1       face_names = []
  1059   1968.4 MiB      0.0 MiB           1       face_location_list = []
  1060   1968.4 MiB      0.0 MiB           1       number_of_crops = 0
  1061   1968.4 MiB      0.0 MiB           1       filename = ''
  1062   1968.4 MiB      0.0 MiB           1       debug_frame_turn_count = 0
  1063   1968.4 MiB      0.0 MiB           1       modified_frame_list = []
  1064                                         
  1065   1968.5 MiB      0.0 MiB           2       for frame_data in frame_datas_array:
  1066                                                 """DEBUG"""
  1067                                                 # debug_frame_turn_count += 1; print('*******',debug_frame_turn_count, '周目*******')
  1068   1968.4 MiB      0.0 MiB           1           if "face_location_list" not in frame_data:
  1069                                                     if args_dict["headless"] == False:
  1070                                                         # 半透明処理（後半）_1frameに対して1回
  1071                                                         if args_dict["show_overlay"]==True:
  1072                                                             cv2.addWeighted(frame_data["overlay"], global_memory["alpha"], frame_data["img"], 1-global_memory["alpha"], 0, frame_data["img"])
  1073                                                     continue
  1074                                         
  1075   1968.4 MiB      0.0 MiB           1           resized_frame = frame_data["img"]
  1076   1968.4 MiB      0.0 MiB           1           face_location_list = frame_data["face_location_list"]
  1077   1968.4 MiB      0.0 MiB           1           overlay = frame_data["overlay"]
  1078   1968.4 MiB      0.0 MiB           1           person_data_list = frame_data["person_data_list"]
  1079   1968.4 MiB      0.0 MiB           1           date = datetime.datetime.now().strftime("%Y,%m,%d,%H,%M,%S,%f")
  1080                                         
  1081                                                 # 名前リスト作成
  1082   1968.4 MiB      0.0 MiB           3           for face_encoding in face_encodings:
  1083                                                     # Initialize name, matches (Inner frame)
  1084   1968.4 MiB      0.0 MiB           2               name = "Unknown"
  1085   1968.4 MiB      0.0 MiB           2               matches = check_compare_faces(args_dict["known_face_encodings"], face_encoding, args_dict["tolerance"])
  1086                                                     # 名前リスト(face_names)生成
  1087   1968.4 MiB      0.0 MiB           2               face_names = return_face_names(args_dict, face_names, face_encoding,  matches, name)
  1088                                         
  1089                                                 # face_location_listについて繰り返し処理→frame_datas_array作成
  1090   1968.4 MiB      0.0 MiB           1           number_of_people = 0  # 人数。計算上0人から始める。draw_default_face()で使用する
  1091   1968.5 MiB      0.0 MiB           3           for (top, right, bottom, left), name in zip(face_location_list, face_names):
  1092   1968.5 MiB      0.0 MiB           2               person_data = defaultdict(int)
  1093   1968.5 MiB      0.0 MiB           2               if name == 'Unknown':
  1094                                                         percentage_and_symbol: str = ''
  1095                                                         dis: str = ''
  1096                                                         p: float = 1.0
  1097                                                     else:  # nameが誰かの名前の場合
  1098                                                         distance: str
  1099   1968.5 MiB      0.0 MiB           2                   name, distance = name.split(':')
  1100                                                         # パーセンテージの算出
  1101   1968.5 MiB      0.0 MiB           2                   dis = str(round(float(distance), 2))
  1102   1968.5 MiB      0.0 MiB           2                   p = float(distance)
  1103                                                         # return_percentage(p)
  1104   1968.5 MiB      0.0 MiB           2                   percentage = return_percentage(p)
  1105   1968.5 MiB      0.0 MiB           2                   percentage = round(percentage, 1)
  1106   1968.5 MiB      0.0 MiB           2                   percentage_and_symbol = str(percentage) + '%'
  1107                                                         # ファイル名を最初のアンダーバーで区切る（アンダーバーは複数なのでmaxsplit = 1）
  1108   1968.5 MiB      0.0 MiB           2                   try:
  1109   1968.5 MiB      0.0 MiB           2                       name, _ = name.split('_', maxsplit = 1)
  1110                                                         except:
  1111                                                             """TODO
  1112                                                             logger warn level"""
  1113                                                             sg.popup_error('ファイル名に異常が見つかりました',name,'NAME_default.png あるいはNAME_001.png (001部分は001からはじまる連番)にしてください','noFaceフォルダに移動します')
  1114                                                             move(name, './noFace/')
  1115                                                             return
  1116                                         
  1117                                         
  1118                                                     # クロップ画像保存
  1119   1968.5 MiB      0.0 MiB           2               if args_dict["crop_face_image"]==True:
  1120   1968.5 MiB      0.0 MiB           2                   if args_dict["frequency_crop_image"] < number_of_crops:
  1121                                                             pil_img_obj_rgb = pil_img_rgb_instance(resized_frame)
  1122                                                             filename,number_of_crops, frequency_crop_image = \
  1123                                                                 make_crop_face_image(name, dis, pil_img_obj_rgb, top, left, right, bottom, number_of_crops, args_dict["frequency_crop_image"])
  1124                                                             number_of_crops = 0
  1125                                                         else:
  1126   1968.5 MiB      0.0 MiB           2                       number_of_crops += 1
  1127                                         
  1128                                                     # 描画系
  1129   1968.5 MiB      0.0 MiB           2               if args_dict["headless"] == False:
  1130                                                         # デフォルト顔画像の描画
  1131   1968.5 MiB      0.0 MiB           2                   if p <= args_dict["tolerance"]:  # ディスタンスpがtolerance以下の場合
  1132   1968.5 MiB      0.0 MiB           2                       if args_dict["default_face_image_draw"] == True:
  1133   1968.5 MiB      0.0 MiB           2                           resized_frame = draw_default_face(args_dict, name, resized_frame, number_of_people)
  1134   1968.5 MiB      0.0 MiB           2                           number_of_people += 1  # 何人目か
  1135                                                                 """DEBUG"""
  1136                                                                 # frame_imshow_for_debug(resized_frame)
  1137                                         
  1138                                                         # ピンクまたは白の四角形描画
  1139   1968.5 MiB      0.0 MiB           2                   if args_dict["rectangle"] == True:
  1140                                                             if name == 'Unknown':  # プリセット顔画像に対応する顔画像がなかった場合
  1141                                                                 resized_frame = draw_pink_rectangle(resized_frame, top,bottom,left,right)
  1142                                                             else:  # プリセット顔画像に対応する顔画像があった場合
  1143                                                                 resized_frame = draw_white_rectangle(args_dict["rectangle"], resized_frame, top, left, right, bottom)
  1144                                                             
  1145                                                         # パーセンテージ描画
  1146   1968.5 MiB      0.0 MiB           2                   if args_dict["show_percentage"]==True:
  1147   1968.5 MiB      0.0 MiB           2                       resized_frame = display_percentage(percentage_and_symbol,resized_frame, p, left, right, bottom, args_dict["tolerance"])
  1148                                                             """DEBUG"""
  1149                                                             # frame_imshow_for_debug(resized_frame)
  1150                                         
  1151                                                         # 名前表示と名前用四角形の描画
  1152   1968.5 MiB      0.0 MiB           2                   if args_dict["show_name"]==True:
  1153   1968.5 MiB      0.0 MiB           2                       resized_frame = draw_rectangle_for_name(name,resized_frame, left, right,bottom)
  1154   1968.5 MiB      0.0 MiB           2                       pil_img_obj= Image.fromarray(resized_frame)
  1155   1968.5 MiB      0.1 MiB           2                       resized_frame = draw_text_for_name(left,right,bottom,name, p,args_dict["tolerance"],pil_img_obj)
  1156                                                             """DEBUG"""
  1157                                                             # frame_imshow_for_debug(resized_frame)
  1158                                         
  1159                                                         # target_rectangleの描画
  1160   1968.5 MiB      0.0 MiB           2                   if args_dict["target_rectangle"] == True:
  1161   1968.5 MiB      0.0 MiB           2                       resized_frame = draw_target_rectangle(args_dict["rect01_png"], resized_frame,top,bottom,left,right,name)
  1162                                                             """DEBUG"""
  1163                                                             # frame_imshow_for_debug(resized_frame)
  1164                                         
  1165                                                         """1.3.06でボトムエリア描画は廃止予定
  1166                                                         if args_dict["bottom_area"] == True:
  1167                                                             resized_frame = draw_bottom_area_rectangle(name,args_dict["bottom_area"], args_dict["set_height"], args_dict["set_width"], resized_frame)
  1168                                         
  1169                                                         # bottom_area中の描画
  1170                                                         if args_dict["bottom_area"]==True:
  1171                                                             unregistered_face_image, resized_frame = draw_bottom_area(args_dict, name,resized_frame)
  1172                                                             # name等描画
  1173                                                             inner_bottom_area_char_left = 200
  1174                                                             inner_bottom_area_char_top = args_dict["set_height"] + 30
  1175                                                             draw  =  make_draw_object(resized_frame)
  1176                                                             draw_text_in_bottom_area(draw, inner_bottom_area_char_left, inner_bottom_area_char_top,name,percentage_and_symbol,date)
  1177                                                             resized_frame = convert_pil_img_to_ndarray(pil_img_obj)
  1178                                                         """
  1179                                         
  1180   1968.5 MiB      0.0 MiB           2               person_data = {'name': name, 'pict':filename,  'date':date, 'location':(top,right,bottom,left), 'percentage_and_symbol': percentage_and_symbol}
  1181   1968.5 MiB      0.0 MiB           2               person_data_list.append(person_data)
  1182                                                 # End for (top, right, bottom, left), name in zip(face_location_list, face_names)
  1183                                         
  1184                                                 # _1frameに対して1回
  1185   1968.5 MiB      0.0 MiB           1           if args_dict["headless"] == False:
  1186   1968.5 MiB      0.0 MiB           1               frame_datas = {'img':resized_frame, 'face_location_list':face_location_list, 'overlay': overlay, 'person_data_list': person_data_list}
  1187                                                     """DEBUG"""
  1188                                                     # frame_imshow_for_debug(resized_frame)
  1189                                                     # frame_datas_array.append(frame_datas)
  1190   1968.5 MiB      0.0 MiB           1               modified_frame_list.append(frame_datas)
  1191                                         
  1192                                                 elif args_dict["headless"] == True:
  1193                                                     frame_datas = {'img':'no-data_img', 'face_location_list':face_location_list, 'overlay': overlay, 'person_data_list': person_data_list}  # TypeError: list indices must be integers or slices, not str -> img
  1194                                                     # frame_datas_array.append(frame_datas)
  1195                                                     modified_frame_list.append(frame_datas)
  1196                                                 else:
  1197                                                     frame_datas = {'img':'no-data_img', 'face_location_list':face_location_list, 'overlay': overlay, 'person_data_list': 'no-data_person_data_list'} 
  1198                                                     # frame_datas_array.append(frame_datas)
  1199                                                     modified_frame_list.append(frame_datas)
  1200                                         
  1201   1968.5 MiB      0.0 MiB           1           if args_dict["headless"] == False:
  1202                                                     # 半透明処理（後半）_1frameに対して1回
  1203   1968.5 MiB      0.0 MiB           1               if args_dict["show_overlay"]==True:
  1204                                                         # cv2.addWeighted(overlay, global_memory["alpha"], resized_frame, 1-global_memory["alpha"], 0, resized_frame)
  1205   1968.5 MiB      0.0 MiB           2                   for modified_frame in modified_frame_list:
  1206   1968.5 MiB      0.0 MiB           1                       cv2.addWeighted(modified_frame["overlay"], global_memory["alpha"], modified_frame["img"], 1-global_memory["alpha"], 0, modified_frame["img"])
  1207                                                         # """DEBUG"""
  1208                                                         # frame_imshow_for_debug(resized_frame)
  1209                                                 
  1210                                             # return frame_datas
  1211   1968.5 MiB      0.0 MiB           1       print(f"modified_frame_list: {modified_frame_list.__sizeof__()}")
  1212   1968.5 MiB      0.0 MiB           1       return modified_frame_list
  1213                                         
  1214                                             """機能停止
  1215                                             # yield出力ブロック ===================================
  1216                                             ## パイプ出力機構も含む
  1217                                             ## TODO: frame_datas_arrayから値を取り出す処理に変えること
  1218                                             if not frame_datas == None:
  1219                                                 if output_frame_data == True:  ## pipe出力時
  1220                                                     # frame_datas['stream'] = resized_frame
  1221                                                     # yield frame_datas
  1222                                                     pass
  1223                                                 elif output_frame_data == False:  ## 通常使用時
  1224                                                     frame_datas = {'name': name, 'pict':filename,  'date':date, 'img':resized_frame, 'location':(top,right,bottom,left), 'percentage_and_symbol': percentage_and_symbol}
  1225                                                     frame_datas_array.append(frame_datas)
  1226                                                     yield frame_datas_array
  1227                                                     # sys.stdout.buffer.write(frame_datas['stream'])  ## 'stream'を出力する
  1228                                                     # print(type(resized_frame))  ## <class 'numpy.ndarray'>
  1229                                                     # print(type(frame_datas['stream']))  ## <class 'numpy.ndarray'>
  1230                                         
  1231                                                     # cv2.imshow('FACE01', frame_datas['stream'])
  1232                                                     # if cv2.waitKey(1) & 0xFF == ord('q'):
  1233                                                     #     break
  1234                                             # =====================================================
  1235                                         
  1236                                             # パイプ使用時の必要情報を表示 ========
  1237                                             if print_property==True:
  1238                                                 print('fps: ', fps)
  1239                                                 print('frame shape: ', resized_frame.shape)  ## (450, 800, 3)
  1240                                                 print('dtype: ', resized_frame.dtype)  ## uint8
  1241                                                 print('frame size: ', resized_frame.size) ## 1080000←450*800*3
  1242                                                 exit()
  1243                                             # =====================================
  1244                                             """


exec_times: 4
メモリプロファイリング中
メモリプロファイリング中
Filename: /home/terms/bin/FACE01/FACE01.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
  1007   1973.1 MiB   1973.1 MiB           1   @profile()
  1008                                         def face_encoding_process(args_dict, frame_datas_array):
  1009                                             """frame_datas_arrayの定義
  1010                                             person_data = {'name': name, 'pict':filename,  'date':date, 'location':(top,right,bottom,left), 'percentage_and_symbol': percentage_and_symbol}
  1011                                             person_data_list.append(person_data)
  1012                                             frame_datas = {'img':resized_frame, 'face_location_list':face_location_list, 'overlay': overlay, 'person_data_list': person_data_list}
  1013                                             frame_datas_array.append(frame_datas)
  1014                                             """
  1015   1973.1 MiB      0.0 MiB           1       face_encodings = []
  1016   1973.1 MiB      0.0 MiB           1       for frame_data in frame_datas_array:
  1017   1973.1 MiB      0.0 MiB           1           resized_frame = frame_data["img"]
  1018   1973.1 MiB      0.0 MiB           1           face_location_list = frame_data["face_location_list"]  # [(139, 190, 257, 72)]
  1019   1973.1 MiB      0.0 MiB           1           if len(face_location_list) == 0:
  1020                                                     return face_encodings, frame_datas_array
  1021   1973.1 MiB      0.0 MiB           1           elif len(face_location_list) > 0:
  1022                                                     # 顔ロケーションからエンコーディングを求める
  1023   1973.1 MiB      0.0 MiB           1               if args_dict["use_mediapipe"] == True and  args_dict["person_frame_face_encoding"] == True:
  1024                                                         """FIX
  1025                                                         人数分を繰り返し処理しているので時間がかかる。
  1026                                                         dlibは一つの画像に複数の座標を与えて一度に処理をする。
  1027                                                         なので各person_frameをくっつけて一つの画像にすれば処理時間は短くなる。
  1028                                                             numpy.hstack(tup)[source]
  1029                                                             Stack arrays in sequence horizontally (column wise).
  1030                                                             https://numpy.org/doc/stable/reference/generated/numpy.hstack.html
  1031                                                         """
  1032                                                         concatenate_face_location_list, concatenate_person_frame = \
  1033                                                             return_concatenate_location_and_frame(resized_frame, face_location_list)
  1034                                                         face_encodings = faceapi.face_encodings(concatenate_person_frame, concatenate_face_location_list, args_dict["jitters"], args_dict["model"])
  1035   1973.1 MiB      0.0 MiB           1               elif args_dict["use_mediapipe"] == True and  args_dict["person_frame_face_encoding"] == False:
  1036   1973.1 MiB      0.0 MiB           1                   face_encodings = faceapi.face_encodings(resized_frame, face_location_list, args_dict["jitters"], args_dict["model"])
  1037                                                     elif args_dict["use_mediapipe"] == False and  args_dict["person_frame_face_encoding"] == True:
  1038                                                         logger_warning("\n---------------------------------")
  1039                                                         logger_warning("config.ini:")
  1040                                                         logger_warning("mediapipe = False  の場合 person_frame_face_encoding = True  には出来ません")
  1041                                                         logger_warning("システム管理者へ連絡の後、設定を変更してください")
  1042                                                         logger_warning("処理を終了します")
  1043                                                         logger_warning("---------------------------------")
  1044                                                         quit()
  1045                                                     elif args_dict["use_mediapipe"] == False and args_dict["person_frame_face_encoding"] == False:
  1046                                                         face_encodings = faceapi.face_encodings(resized_frame, face_location_list, args_dict["jitters"], args_dict["model"])
  1047   1973.1 MiB      0.0 MiB           1           return face_encodings, frame_datas_array


modified_frame_list: 72
Filename: /home/terms/bin/FACE01/FACE01.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
  1050   1973.1 MiB   1973.1 MiB           1   @profile()
  1051                                         def frame_post_processing(args_dict, face_encodings, frame_datas_array):
  1052                                             """frame_datas_arrayの定義
  1053                                             person_data = {'name': name, 'pict':filename,  'date':date, 'location':(top,right,bottom,left), 'percentage_and_symbol': percentage_and_symbol}
  1054                                             person_data_list.append(person_data)
  1055                                             frame_datas = {'img':resized_frame, 'face_location_list':face_location_list, 'overlay': overlay, 'person_data_list': person_data_list}
  1056                                             frame_datas_array.append(frame_datas)
  1057                                             """
  1058   1973.1 MiB      0.0 MiB           1       face_names = []
  1059   1973.1 MiB      0.0 MiB           1       face_location_list = []
  1060   1973.1 MiB      0.0 MiB           1       number_of_crops = 0
  1061   1973.1 MiB      0.0 MiB           1       filename = ''
  1062   1973.1 MiB      0.0 MiB           1       debug_frame_turn_count = 0
  1063   1973.1 MiB      0.0 MiB           1       modified_frame_list = []
  1064                                         
  1065   1973.2 MiB      0.0 MiB           2       for frame_data in frame_datas_array:
  1066                                                 """DEBUG"""
  1067                                                 # debug_frame_turn_count += 1; print('*******',debug_frame_turn_count, '周目*******')
  1068   1973.1 MiB      0.0 MiB           1           if "face_location_list" not in frame_data:
  1069                                                     if args_dict["headless"] == False:
  1070                                                         # 半透明処理（後半）_1frameに対して1回
  1071                                                         if args_dict["show_overlay"]==True:
  1072                                                             cv2.addWeighted(frame_data["overlay"], global_memory["alpha"], frame_data["img"], 1-global_memory["alpha"], 0, frame_data["img"])
  1073                                                     continue
  1074                                         
  1075   1973.1 MiB      0.0 MiB           1           resized_frame = frame_data["img"]
  1076   1973.1 MiB      0.0 MiB           1           face_location_list = frame_data["face_location_list"]
  1077   1973.1 MiB      0.0 MiB           1           overlay = frame_data["overlay"]
  1078   1973.1 MiB      0.0 MiB           1           person_data_list = frame_data["person_data_list"]
  1079   1973.1 MiB      0.0 MiB           1           date = datetime.datetime.now().strftime("%Y,%m,%d,%H,%M,%S,%f")
  1080                                         
  1081                                                 # 名前リスト作成
  1082   1973.1 MiB      0.0 MiB           3           for face_encoding in face_encodings:
  1083                                                     # Initialize name, matches (Inner frame)
  1084   1973.1 MiB      0.0 MiB           2               name = "Unknown"
  1085   1973.1 MiB      0.0 MiB           2               matches = check_compare_faces(args_dict["known_face_encodings"], face_encoding, args_dict["tolerance"])
  1086                                                     # 名前リスト(face_names)生成
  1087   1973.1 MiB      0.0 MiB           2               face_names = return_face_names(args_dict, face_names, face_encoding,  matches, name)
  1088                                         
  1089                                                 # face_location_listについて繰り返し処理→frame_datas_array作成
  1090   1973.1 MiB      0.0 MiB           1           number_of_people = 0  # 人数。計算上0人から始める。draw_default_face()で使用する
  1091   1973.2 MiB      0.0 MiB           3           for (top, right, bottom, left), name in zip(face_location_list, face_names):
  1092   1973.2 MiB      0.0 MiB           2               person_data = defaultdict(int)
  1093   1973.2 MiB      0.0 MiB           2               if name == 'Unknown':
  1094                                                         percentage_and_symbol: str = ''
  1095                                                         dis: str = ''
  1096                                                         p: float = 1.0
  1097                                                     else:  # nameが誰かの名前の場合
  1098                                                         distance: str
  1099   1973.2 MiB      0.0 MiB           2                   name, distance = name.split(':')
  1100                                                         # パーセンテージの算出
  1101   1973.2 MiB      0.0 MiB           2                   dis = str(round(float(distance), 2))
  1102   1973.2 MiB      0.0 MiB           2                   p = float(distance)
  1103                                                         # return_percentage(p)
  1104   1973.2 MiB      0.0 MiB           2                   percentage = return_percentage(p)
  1105   1973.2 MiB      0.0 MiB           2                   percentage = round(percentage, 1)
  1106   1973.2 MiB      0.0 MiB           2                   percentage_and_symbol = str(percentage) + '%'
  1107                                                         # ファイル名を最初のアンダーバーで区切る（アンダーバーは複数なのでmaxsplit = 1）
  1108   1973.2 MiB      0.0 MiB           2                   try:
  1109   1973.2 MiB      0.0 MiB           2                       name, _ = name.split('_', maxsplit = 1)
  1110                                                         except:
  1111                                                             """TODO
  1112                                                             logger warn level"""
  1113                                                             sg.popup_error('ファイル名に異常が見つかりました',name,'NAME_default.png あるいはNAME_001.png (001部分は001からはじまる連番)にしてください','noFaceフォルダに移動します')
  1114                                                             move(name, './noFace/')
  1115                                                             return
  1116                                         
  1117                                         
  1118                                                     # クロップ画像保存
  1119   1973.2 MiB      0.0 MiB           2               if args_dict["crop_face_image"]==True:
  1120   1973.2 MiB      0.0 MiB           2                   if args_dict["frequency_crop_image"] < number_of_crops:
  1121                                                             pil_img_obj_rgb = pil_img_rgb_instance(resized_frame)
  1122                                                             filename,number_of_crops, frequency_crop_image = \
  1123                                                                 make_crop_face_image(name, dis, pil_img_obj_rgb, top, left, right, bottom, number_of_crops, args_dict["frequency_crop_image"])
  1124                                                             number_of_crops = 0
  1125                                                         else:
  1126   1973.2 MiB      0.0 MiB           2                       number_of_crops += 1
  1127                                         
  1128                                                     # 描画系
  1129   1973.2 MiB      0.0 MiB           2               if args_dict["headless"] == False:
  1130                                                         # デフォルト顔画像の描画
  1131   1973.2 MiB      0.0 MiB           2                   if p <= args_dict["tolerance"]:  # ディスタンスpがtolerance以下の場合
  1132   1973.2 MiB      0.0 MiB           2                       if args_dict["default_face_image_draw"] == True:
  1133   1973.2 MiB      0.0 MiB           2                           resized_frame = draw_default_face(args_dict, name, resized_frame, number_of_people)
  1134   1973.2 MiB      0.0 MiB           2                           number_of_people += 1  # 何人目か
  1135                                                                 """DEBUG"""
  1136                                                                 # frame_imshow_for_debug(resized_frame)
  1137                                         
  1138                                                         # ピンクまたは白の四角形描画
  1139   1973.2 MiB      0.0 MiB           2                   if args_dict["rectangle"] == True:
  1140                                                             if name == 'Unknown':  # プリセット顔画像に対応する顔画像がなかった場合
  1141                                                                 resized_frame = draw_pink_rectangle(resized_frame, top,bottom,left,right)
  1142                                                             else:  # プリセット顔画像に対応する顔画像があった場合
  1143                                                                 resized_frame = draw_white_rectangle(args_dict["rectangle"], resized_frame, top, left, right, bottom)
  1144                                                             
  1145                                                         # パーセンテージ描画
  1146   1973.2 MiB      0.0 MiB           2                   if args_dict["show_percentage"]==True:
  1147   1973.2 MiB      0.0 MiB           2                       resized_frame = display_percentage(percentage_and_symbol,resized_frame, p, left, right, bottom, args_dict["tolerance"])
  1148                                                             """DEBUG"""
  1149                                                             # frame_imshow_for_debug(resized_frame)
  1150                                         
  1151                                                         # 名前表示と名前用四角形の描画
  1152   1973.2 MiB      0.0 MiB           2                   if args_dict["show_name"]==True:
  1153   1973.2 MiB      0.0 MiB           2                       resized_frame = draw_rectangle_for_name(name,resized_frame, left, right,bottom)
  1154   1973.2 MiB      0.0 MiB           2                       pil_img_obj= Image.fromarray(resized_frame)
  1155   1973.2 MiB      0.1 MiB           2                       resized_frame = draw_text_for_name(left,right,bottom,name, p,args_dict["tolerance"],pil_img_obj)
  1156                                                             """DEBUG"""
  1157                                                             # frame_imshow_for_debug(resized_frame)
  1158                                         
  1159                                                         # target_rectangleの描画
  1160   1973.2 MiB      0.0 MiB           2                   if args_dict["target_rectangle"] == True:
  1161   1973.2 MiB      0.0 MiB           2                       resized_frame = draw_target_rectangle(args_dict["rect01_png"], resized_frame,top,bottom,left,right,name)
  1162                                                             """DEBUG"""
  1163                                                             # frame_imshow_for_debug(resized_frame)
  1164                                         
  1165                                                         """1.3.06でボトムエリア描画は廃止予定
  1166                                                         if args_dict["bottom_area"] == True:
  1167                                                             resized_frame = draw_bottom_area_rectangle(name,args_dict["bottom_area"], args_dict["set_height"], args_dict["set_width"], resized_frame)
  1168                                         
  1169                                                         # bottom_area中の描画
  1170                                                         if args_dict["bottom_area"]==True:
  1171                                                             unregistered_face_image, resized_frame = draw_bottom_area(args_dict, name,resized_frame)
  1172                                                             # name等描画
  1173                                                             inner_bottom_area_char_left = 200
  1174                                                             inner_bottom_area_char_top = args_dict["set_height"] + 30
  1175                                                             draw  =  make_draw_object(resized_frame)
  1176                                                             draw_text_in_bottom_area(draw, inner_bottom_area_char_left, inner_bottom_area_char_top,name,percentage_and_symbol,date)
  1177                                                             resized_frame = convert_pil_img_to_ndarray(pil_img_obj)
  1178                                                         """
  1179                                         
  1180   1973.2 MiB      0.0 MiB           2               person_data = {'name': name, 'pict':filename,  'date':date, 'location':(top,right,bottom,left), 'percentage_and_symbol': percentage_and_symbol}
  1181   1973.2 MiB      0.0 MiB           2               person_data_list.append(person_data)
  1182                                                 # End for (top, right, bottom, left), name in zip(face_location_list, face_names)
  1183                                         
  1184                                                 # _1frameに対して1回
  1185   1973.2 MiB      0.0 MiB           1           if args_dict["headless"] == False:
  1186   1973.2 MiB      0.0 MiB           1               frame_datas = {'img':resized_frame, 'face_location_list':face_location_list, 'overlay': overlay, 'person_data_list': person_data_list}
  1187                                                     """DEBUG"""
  1188                                                     # frame_imshow_for_debug(resized_frame)
  1189                                                     # frame_datas_array.append(frame_datas)
  1190   1973.2 MiB      0.0 MiB           1               modified_frame_list.append(frame_datas)
  1191                                         
  1192                                                 elif args_dict["headless"] == True:
  1193                                                     frame_datas = {'img':'no-data_img', 'face_location_list':face_location_list, 'overlay': overlay, 'person_data_list': person_data_list}  # TypeError: list indices must be integers or slices, not str -> img
  1194                                                     # frame_datas_array.append(frame_datas)
  1195                                                     modified_frame_list.append(frame_datas)
  1196                                                 else:
  1197                                                     frame_datas = {'img':'no-data_img', 'face_location_list':face_location_list, 'overlay': overlay, 'person_data_list': 'no-data_person_data_list'} 
  1198                                                     # frame_datas_array.append(frame_datas)
  1199                                                     modified_frame_list.append(frame_datas)
  1200                                         
  1201   1973.2 MiB      0.0 MiB           1           if args_dict["headless"] == False:
  1202                                                     # 半透明処理（後半）_1frameに対して1回
  1203   1973.2 MiB      0.0 MiB           1               if args_dict["show_overlay"]==True:
  1204                                                         # cv2.addWeighted(overlay, global_memory["alpha"], resized_frame, 1-global_memory["alpha"], 0, resized_frame)
  1205   1973.2 MiB      0.0 MiB           2                   for modified_frame in modified_frame_list:
  1206   1973.2 MiB      0.0 MiB           1                       cv2.addWeighted(modified_frame["overlay"], global_memory["alpha"], modified_frame["img"], 1-global_memory["alpha"], 0, modified_frame["img"])
  1207                                                         # """DEBUG"""
  1208                                                         # frame_imshow_for_debug(resized_frame)
  1209                                                 
  1210                                             # return frame_datas
  1211   1973.2 MiB      0.0 MiB           1       print(f"modified_frame_list: {modified_frame_list.__sizeof__()}")
  1212   1973.2 MiB      0.0 MiB           1       return modified_frame_list
  1213                                         
  1214                                             """機能停止
  1215                                             # yield出力ブロック ===================================
  1216                                             ## パイプ出力機構も含む
  1217                                             ## TODO: frame_datas_arrayから値を取り出す処理に変えること
  1218                                             if not frame_datas == None:
  1219                                                 if output_frame_data == True:  ## pipe出力時
  1220                                                     # frame_datas['stream'] = resized_frame
  1221                                                     # yield frame_datas
  1222                                                     pass
  1223                                                 elif output_frame_data == False:  ## 通常使用時
  1224                                                     frame_datas = {'name': name, 'pict':filename,  'date':date, 'img':resized_frame, 'location':(top,right,bottom,left), 'percentage_and_symbol': percentage_and_symbol}
  1225                                                     frame_datas_array.append(frame_datas)
  1226                                                     yield frame_datas_array
  1227                                                     # sys.stdout.buffer.write(frame_datas['stream'])  ## 'stream'を出力する
  1228                                                     # print(type(resized_frame))  ## <class 'numpy.ndarray'>
  1229                                                     # print(type(frame_datas['stream']))  ## <class 'numpy.ndarray'>
  1230                                         
  1231                                                     # cv2.imshow('FACE01', frame_datas['stream'])
  1232                                                     # if cv2.waitKey(1) & 0xFF == ord('q'):
  1233                                                     #     break
  1234                                             # =====================================================
  1235                                         
  1236                                             # パイプ使用時の必要情報を表示 ========
  1237                                             if print_property==True:
  1238                                                 print('fps: ', fps)
  1239                                                 print('frame shape: ', resized_frame.shape)  ## (450, 800, 3)
  1240                                                 print('dtype: ', resized_frame.dtype)  ## uint8
  1241                                                 print('frame size: ', resized_frame.size) ## 1080000←450*800*3
  1242                                                 exit()
  1243                                             # =====================================
  1244                                             """


exec_times: 3
メモリプロファイリング中
メモリプロファイリング中
Filename: /home/terms/bin/FACE01/FACE01.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
  1007   1977.8 MiB   1977.8 MiB           1   @profile()
  1008                                         def face_encoding_process(args_dict, frame_datas_array):
  1009                                             """frame_datas_arrayの定義
  1010                                             person_data = {'name': name, 'pict':filename,  'date':date, 'location':(top,right,bottom,left), 'percentage_and_symbol': percentage_and_symbol}
  1011                                             person_data_list.append(person_data)
  1012                                             frame_datas = {'img':resized_frame, 'face_location_list':face_location_list, 'overlay': overlay, 'person_data_list': person_data_list}
  1013                                             frame_datas_array.append(frame_datas)
  1014                                             """
  1015   1977.8 MiB      0.0 MiB           1       face_encodings = []
  1016   1977.8 MiB      0.0 MiB           1       for frame_data in frame_datas_array:
  1017   1977.8 MiB      0.0 MiB           1           resized_frame = frame_data["img"]
  1018   1977.8 MiB      0.0 MiB           1           face_location_list = frame_data["face_location_list"]  # [(139, 190, 257, 72)]
  1019   1977.8 MiB      0.0 MiB           1           if len(face_location_list) == 0:
  1020                                                     return face_encodings, frame_datas_array
  1021   1977.8 MiB      0.0 MiB           1           elif len(face_location_list) > 0:
  1022                                                     # 顔ロケーションからエンコーディングを求める
  1023   1977.8 MiB      0.0 MiB           1               if args_dict["use_mediapipe"] == True and  args_dict["person_frame_face_encoding"] == True:
  1024                                                         """FIX
  1025                                                         人数分を繰り返し処理しているので時間がかかる。
  1026                                                         dlibは一つの画像に複数の座標を与えて一度に処理をする。
  1027                                                         なので各person_frameをくっつけて一つの画像にすれば処理時間は短くなる。
  1028                                                             numpy.hstack(tup)[source]
  1029                                                             Stack arrays in sequence horizontally (column wise).
  1030                                                             https://numpy.org/doc/stable/reference/generated/numpy.hstack.html
  1031                                                         """
  1032                                                         concatenate_face_location_list, concatenate_person_frame = \
  1033                                                             return_concatenate_location_and_frame(resized_frame, face_location_list)
  1034                                                         face_encodings = faceapi.face_encodings(concatenate_person_frame, concatenate_face_location_list, args_dict["jitters"], args_dict["model"])
  1035   1977.8 MiB      0.0 MiB           1               elif args_dict["use_mediapipe"] == True and  args_dict["person_frame_face_encoding"] == False:
  1036   1977.8 MiB      0.0 MiB           1                   face_encodings = faceapi.face_encodings(resized_frame, face_location_list, args_dict["jitters"], args_dict["model"])
  1037                                                     elif args_dict["use_mediapipe"] == False and  args_dict["person_frame_face_encoding"] == True:
  1038                                                         logger_warning("\n---------------------------------")
  1039                                                         logger_warning("config.ini:")
  1040                                                         logger_warning("mediapipe = False  の場合 person_frame_face_encoding = True  には出来ません")
  1041                                                         logger_warning("システム管理者へ連絡の後、設定を変更してください")
  1042                                                         logger_warning("処理を終了します")
  1043                                                         logger_warning("---------------------------------")
  1044                                                         quit()
  1045                                                     elif args_dict["use_mediapipe"] == False and args_dict["person_frame_face_encoding"] == False:
  1046                                                         face_encodings = faceapi.face_encodings(resized_frame, face_location_list, args_dict["jitters"], args_dict["model"])
  1047   1977.8 MiB      0.0 MiB           1           return face_encodings, frame_datas_array


modified_frame_list: 72
Filename: /home/terms/bin/FACE01/FACE01.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
  1050   1977.8 MiB   1977.8 MiB           1   @profile()
  1051                                         def frame_post_processing(args_dict, face_encodings, frame_datas_array):
  1052                                             """frame_datas_arrayの定義
  1053                                             person_data = {'name': name, 'pict':filename,  'date':date, 'location':(top,right,bottom,left), 'percentage_and_symbol': percentage_and_symbol}
  1054                                             person_data_list.append(person_data)
  1055                                             frame_datas = {'img':resized_frame, 'face_location_list':face_location_list, 'overlay': overlay, 'person_data_list': person_data_list}
  1056                                             frame_datas_array.append(frame_datas)
  1057                                             """
  1058   1977.8 MiB      0.0 MiB           1       face_names = []
  1059   1977.8 MiB      0.0 MiB           1       face_location_list = []
  1060   1977.8 MiB      0.0 MiB           1       number_of_crops = 0
  1061   1977.8 MiB      0.0 MiB           1       filename = ''
  1062   1977.8 MiB      0.0 MiB           1       debug_frame_turn_count = 0
  1063   1977.8 MiB      0.0 MiB           1       modified_frame_list = []
  1064                                         
  1065   1977.9 MiB      0.0 MiB           2       for frame_data in frame_datas_array:
  1066                                                 """DEBUG"""
  1067                                                 # debug_frame_turn_count += 1; print('*******',debug_frame_turn_count, '周目*******')
  1068   1977.8 MiB      0.0 MiB           1           if "face_location_list" not in frame_data:
  1069                                                     if args_dict["headless"] == False:
  1070                                                         # 半透明処理（後半）_1frameに対して1回
  1071                                                         if args_dict["show_overlay"]==True:
  1072                                                             cv2.addWeighted(frame_data["overlay"], global_memory["alpha"], frame_data["img"], 1-global_memory["alpha"], 0, frame_data["img"])
  1073                                                     continue
  1074                                         
  1075   1977.8 MiB      0.0 MiB           1           resized_frame = frame_data["img"]
  1076   1977.8 MiB      0.0 MiB           1           face_location_list = frame_data["face_location_list"]
  1077   1977.8 MiB      0.0 MiB           1           overlay = frame_data["overlay"]
  1078   1977.8 MiB      0.0 MiB           1           person_data_list = frame_data["person_data_list"]
  1079   1977.8 MiB      0.0 MiB           1           date = datetime.datetime.now().strftime("%Y,%m,%d,%H,%M,%S,%f")
  1080                                         
  1081                                                 # 名前リスト作成
  1082   1977.8 MiB      0.0 MiB           3           for face_encoding in face_encodings:
  1083                                                     # Initialize name, matches (Inner frame)
  1084   1977.8 MiB      0.0 MiB           2               name = "Unknown"
  1085   1977.8 MiB      0.0 MiB           2               matches = check_compare_faces(args_dict["known_face_encodings"], face_encoding, args_dict["tolerance"])
  1086                                                     # 名前リスト(face_names)生成
  1087   1977.8 MiB      0.0 MiB           2               face_names = return_face_names(args_dict, face_names, face_encoding,  matches, name)
  1088                                         
  1089                                                 # face_location_listについて繰り返し処理→frame_datas_array作成
  1090   1977.8 MiB      0.0 MiB           1           number_of_people = 0  # 人数。計算上0人から始める。draw_default_face()で使用する
  1091   1977.9 MiB      0.0 MiB           3           for (top, right, bottom, left), name in zip(face_location_list, face_names):
  1092   1977.9 MiB      0.0 MiB           2               person_data = defaultdict(int)
  1093   1977.9 MiB      0.0 MiB           2               if name == 'Unknown':
  1094                                                         percentage_and_symbol: str = ''
  1095                                                         dis: str = ''
  1096                                                         p: float = 1.0
  1097                                                     else:  # nameが誰かの名前の場合
  1098                                                         distance: str
  1099   1977.9 MiB      0.0 MiB           2                   name, distance = name.split(':')
  1100                                                         # パーセンテージの算出
  1101   1977.9 MiB      0.0 MiB           2                   dis = str(round(float(distance), 2))
  1102   1977.9 MiB      0.0 MiB           2                   p = float(distance)
  1103                                                         # return_percentage(p)
  1104   1977.9 MiB      0.0 MiB           2                   percentage = return_percentage(p)
  1105   1977.9 MiB      0.0 MiB           2                   percentage = round(percentage, 1)
  1106   1977.9 MiB      0.0 MiB           2                   percentage_and_symbol = str(percentage) + '%'
  1107                                                         # ファイル名を最初のアンダーバーで区切る（アンダーバーは複数なのでmaxsplit = 1）
  1108   1977.9 MiB      0.0 MiB           2                   try:
  1109   1977.9 MiB      0.0 MiB           2                       name, _ = name.split('_', maxsplit = 1)
  1110                                                         except:
  1111                                                             """TODO
  1112                                                             logger warn level"""
  1113                                                             sg.popup_error('ファイル名に異常が見つかりました',name,'NAME_default.png あるいはNAME_001.png (001部分は001からはじまる連番)にしてください','noFaceフォルダに移動します')
  1114                                                             move(name, './noFace/')
  1115                                                             return
  1116                                         
  1117                                         
  1118                                                     # クロップ画像保存
  1119   1977.9 MiB      0.0 MiB           2               if args_dict["crop_face_image"]==True:
  1120   1977.9 MiB      0.0 MiB           2                   if args_dict["frequency_crop_image"] < number_of_crops:
  1121                                                             pil_img_obj_rgb = pil_img_rgb_instance(resized_frame)
  1122                                                             filename,number_of_crops, frequency_crop_image = \
  1123                                                                 make_crop_face_image(name, dis, pil_img_obj_rgb, top, left, right, bottom, number_of_crops, args_dict["frequency_crop_image"])
  1124                                                             number_of_crops = 0
  1125                                                         else:
  1126   1977.9 MiB      0.0 MiB           2                       number_of_crops += 1
  1127                                         
  1128                                                     # 描画系
  1129   1977.9 MiB      0.0 MiB           2               if args_dict["headless"] == False:
  1130                                                         # デフォルト顔画像の描画
  1131   1977.9 MiB      0.0 MiB           2                   if p <= args_dict["tolerance"]:  # ディスタンスpがtolerance以下の場合
  1132   1977.9 MiB      0.0 MiB           2                       if args_dict["default_face_image_draw"] == True:
  1133   1977.9 MiB      0.0 MiB           2                           resized_frame = draw_default_face(args_dict, name, resized_frame, number_of_people)
  1134   1977.9 MiB      0.0 MiB           2                           number_of_people += 1  # 何人目か
  1135                                                                 """DEBUG"""
  1136                                                                 # frame_imshow_for_debug(resized_frame)
  1137                                         
  1138                                                         # ピンクまたは白の四角形描画
  1139   1977.9 MiB      0.0 MiB           2                   if args_dict["rectangle"] == True:
  1140                                                             if name == 'Unknown':  # プリセット顔画像に対応する顔画像がなかった場合
  1141                                                                 resized_frame = draw_pink_rectangle(resized_frame, top,bottom,left,right)
  1142                                                             else:  # プリセット顔画像に対応する顔画像があった場合
  1143                                                                 resized_frame = draw_white_rectangle(args_dict["rectangle"], resized_frame, top, left, right, bottom)
  1144                                                             
  1145                                                         # パーセンテージ描画
  1146   1977.9 MiB      0.0 MiB           2                   if args_dict["show_percentage"]==True:
  1147   1977.9 MiB      0.0 MiB           2                       resized_frame = display_percentage(percentage_and_symbol,resized_frame, p, left, right, bottom, args_dict["tolerance"])
  1148                                                             """DEBUG"""
  1149                                                             # frame_imshow_for_debug(resized_frame)
  1150                                         
  1151                                                         # 名前表示と名前用四角形の描画
  1152   1977.9 MiB      0.0 MiB           2                   if args_dict["show_name"]==True:
  1153   1977.9 MiB      0.0 MiB           2                       resized_frame = draw_rectangle_for_name(name,resized_frame, left, right,bottom)
  1154   1977.9 MiB      0.0 MiB           2                       pil_img_obj= Image.fromarray(resized_frame)
  1155   1977.9 MiB      0.1 MiB           2                       resized_frame = draw_text_for_name(left,right,bottom,name, p,args_dict["tolerance"],pil_img_obj)
  1156                                                             """DEBUG"""
  1157                                                             # frame_imshow_for_debug(resized_frame)
  1158                                         
  1159                                                         # target_rectangleの描画
  1160   1977.9 MiB      0.0 MiB           2                   if args_dict["target_rectangle"] == True:
  1161   1977.9 MiB      0.0 MiB           2                       resized_frame = draw_target_rectangle(args_dict["rect01_png"], resized_frame,top,bottom,left,right,name)
  1162                                                             """DEBUG"""
  1163                                                             # frame_imshow_for_debug(resized_frame)
  1164                                         
  1165                                                         """1.3.06でボトムエリア描画は廃止予定
  1166                                                         if args_dict["bottom_area"] == True:
  1167                                                             resized_frame = draw_bottom_area_rectangle(name,args_dict["bottom_area"], args_dict["set_height"], args_dict["set_width"], resized_frame)
  1168                                         
  1169                                                         # bottom_area中の描画
  1170                                                         if args_dict["bottom_area"]==True:
  1171                                                             unregistered_face_image, resized_frame = draw_bottom_area(args_dict, name,resized_frame)
  1172                                                             # name等描画
  1173                                                             inner_bottom_area_char_left = 200
  1174                                                             inner_bottom_area_char_top = args_dict["set_height"] + 30
  1175                                                             draw  =  make_draw_object(resized_frame)
  1176                                                             draw_text_in_bottom_area(draw, inner_bottom_area_char_left, inner_bottom_area_char_top,name,percentage_and_symbol,date)
  1177                                                             resized_frame = convert_pil_img_to_ndarray(pil_img_obj)
  1178                                                         """
  1179                                         
  1180   1977.9 MiB      0.0 MiB           2               person_data = {'name': name, 'pict':filename,  'date':date, 'location':(top,right,bottom,left), 'percentage_and_symbol': percentage_and_symbol}
  1181   1977.9 MiB      0.0 MiB           2               person_data_list.append(person_data)
  1182                                                 # End for (top, right, bottom, left), name in zip(face_location_list, face_names)
  1183                                         
  1184                                                 # _1frameに対して1回
  1185   1977.9 MiB      0.0 MiB           1           if args_dict["headless"] == False:
  1186   1977.9 MiB      0.0 MiB           1               frame_datas = {'img':resized_frame, 'face_location_list':face_location_list, 'overlay': overlay, 'person_data_list': person_data_list}
  1187                                                     """DEBUG"""
  1188                                                     # frame_imshow_for_debug(resized_frame)
  1189                                                     # frame_datas_array.append(frame_datas)
  1190   1977.9 MiB      0.0 MiB           1               modified_frame_list.append(frame_datas)
  1191                                         
  1192                                                 elif args_dict["headless"] == True:
  1193                                                     frame_datas = {'img':'no-data_img', 'face_location_list':face_location_list, 'overlay': overlay, 'person_data_list': person_data_list}  # TypeError: list indices must be integers or slices, not str -> img
  1194                                                     # frame_datas_array.append(frame_datas)
  1195                                                     modified_frame_list.append(frame_datas)
  1196                                                 else:
  1197                                                     frame_datas = {'img':'no-data_img', 'face_location_list':face_location_list, 'overlay': overlay, 'person_data_list': 'no-data_person_data_list'} 
  1198                                                     # frame_datas_array.append(frame_datas)
  1199                                                     modified_frame_list.append(frame_datas)
  1200                                         
  1201   1977.9 MiB      0.0 MiB           1           if args_dict["headless"] == False:
  1202                                                     # 半透明処理（後半）_1frameに対して1回
  1203   1977.9 MiB      0.0 MiB           1               if args_dict["show_overlay"]==True:
  1204                                                         # cv2.addWeighted(overlay, global_memory["alpha"], resized_frame, 1-global_memory["alpha"], 0, resized_frame)
  1205   1977.9 MiB      0.0 MiB           2                   for modified_frame in modified_frame_list:
  1206   1977.9 MiB      0.0 MiB           1                       cv2.addWeighted(modified_frame["overlay"], global_memory["alpha"], modified_frame["img"], 1-global_memory["alpha"], 0, modified_frame["img"])
  1207                                                         # """DEBUG"""
  1208                                                         # frame_imshow_for_debug(resized_frame)
  1209                                                 
  1210                                             # return frame_datas
  1211   1977.9 MiB      0.0 MiB           1       print(f"modified_frame_list: {modified_frame_list.__sizeof__()}")
  1212   1977.9 MiB      0.0 MiB           1       return modified_frame_list
  1213                                         
  1214                                             """機能停止
  1215                                             # yield出力ブロック ===================================
  1216                                             ## パイプ出力機構も含む
  1217                                             ## TODO: frame_datas_arrayから値を取り出す処理に変えること
  1218                                             if not frame_datas == None:
  1219                                                 if output_frame_data == True:  ## pipe出力時
  1220                                                     # frame_datas['stream'] = resized_frame
  1221                                                     # yield frame_datas
  1222                                                     pass
  1223                                                 elif output_frame_data == False:  ## 通常使用時
  1224                                                     frame_datas = {'name': name, 'pict':filename,  'date':date, 'img':resized_frame, 'location':(top,right,bottom,left), 'percentage_and_symbol': percentage_and_symbol}
  1225                                                     frame_datas_array.append(frame_datas)
  1226                                                     yield frame_datas_array
  1227                                                     # sys.stdout.buffer.write(frame_datas['stream'])  ## 'stream'を出力する
  1228                                                     # print(type(resized_frame))  ## <class 'numpy.ndarray'>
  1229                                                     # print(type(frame_datas['stream']))  ## <class 'numpy.ndarray'>
  1230                                         
  1231                                                     # cv2.imshow('FACE01', frame_datas['stream'])
  1232                                                     # if cv2.waitKey(1) & 0xFF == ord('q'):
  1233                                                     #     break
  1234                                             # =====================================================
  1235                                         
  1236                                             # パイプ使用時の必要情報を表示 ========
  1237                                             if print_property==True:
  1238                                                 print('fps: ', fps)
  1239                                                 print('frame shape: ', resized_frame.shape)  ## (450, 800, 3)
  1240                                                 print('dtype: ', resized_frame.dtype)  ## uint8
  1241                                                 print('frame size: ', resized_frame.size) ## 1080000←450*800*3
  1242                                                 exit()
  1243                                             # =====================================
  1244                                             """


exec_times: 2
メモリプロファイリング中
メモリプロファイリング中
Filename: /home/terms/bin/FACE01/FACE01.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
  1007   1982.3 MiB   1982.3 MiB           1   @profile()
  1008                                         def face_encoding_process(args_dict, frame_datas_array):
  1009                                             """frame_datas_arrayの定義
  1010                                             person_data = {'name': name, 'pict':filename,  'date':date, 'location':(top,right,bottom,left), 'percentage_and_symbol': percentage_and_symbol}
  1011                                             person_data_list.append(person_data)
  1012                                             frame_datas = {'img':resized_frame, 'face_location_list':face_location_list, 'overlay': overlay, 'person_data_list': person_data_list}
  1013                                             frame_datas_array.append(frame_datas)
  1014                                             """
  1015   1982.3 MiB      0.0 MiB           1       face_encodings = []
  1016   1982.3 MiB      0.0 MiB           1       for frame_data in frame_datas_array:
  1017   1982.3 MiB      0.0 MiB           1           resized_frame = frame_data["img"]
  1018   1982.3 MiB      0.0 MiB           1           face_location_list = frame_data["face_location_list"]  # [(139, 190, 257, 72)]
  1019   1982.3 MiB      0.0 MiB           1           if len(face_location_list) == 0:
  1020                                                     return face_encodings, frame_datas_array
  1021   1982.3 MiB      0.0 MiB           1           elif len(face_location_list) > 0:
  1022                                                     # 顔ロケーションからエンコーディングを求める
  1023   1982.3 MiB      0.0 MiB           1               if args_dict["use_mediapipe"] == True and  args_dict["person_frame_face_encoding"] == True:
  1024                                                         """FIX
  1025                                                         人数分を繰り返し処理しているので時間がかかる。
  1026                                                         dlibは一つの画像に複数の座標を与えて一度に処理をする。
  1027                                                         なので各person_frameをくっつけて一つの画像にすれば処理時間は短くなる。
  1028                                                             numpy.hstack(tup)[source]
  1029                                                             Stack arrays in sequence horizontally (column wise).
  1030                                                             https://numpy.org/doc/stable/reference/generated/numpy.hstack.html
  1031                                                         """
  1032                                                         concatenate_face_location_list, concatenate_person_frame = \
  1033                                                             return_concatenate_location_and_frame(resized_frame, face_location_list)
  1034                                                         face_encodings = faceapi.face_encodings(concatenate_person_frame, concatenate_face_location_list, args_dict["jitters"], args_dict["model"])
  1035   1982.3 MiB      0.0 MiB           1               elif args_dict["use_mediapipe"] == True and  args_dict["person_frame_face_encoding"] == False:
  1036   1982.3 MiB      0.0 MiB           1                   face_encodings = faceapi.face_encodings(resized_frame, face_location_list, args_dict["jitters"], args_dict["model"])
  1037                                                     elif args_dict["use_mediapipe"] == False and  args_dict["person_frame_face_encoding"] == True:
  1038                                                         logger_warning("\n---------------------------------")
  1039                                                         logger_warning("config.ini:")
  1040                                                         logger_warning("mediapipe = False  の場合 person_frame_face_encoding = True  には出来ません")
  1041                                                         logger_warning("システム管理者へ連絡の後、設定を変更してください")
  1042                                                         logger_warning("処理を終了します")
  1043                                                         logger_warning("---------------------------------")
  1044                                                         quit()
  1045                                                     elif args_dict["use_mediapipe"] == False and args_dict["person_frame_face_encoding"] == False:
  1046                                                         face_encodings = faceapi.face_encodings(resized_frame, face_location_list, args_dict["jitters"], args_dict["model"])
  1047   1982.3 MiB      0.0 MiB           1           return face_encodings, frame_datas_array


modified_frame_list: 72
Filename: /home/terms/bin/FACE01/FACE01.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
  1050   1982.3 MiB   1982.3 MiB           1   @profile()
  1051                                         def frame_post_processing(args_dict, face_encodings, frame_datas_array):
  1052                                             """frame_datas_arrayの定義
  1053                                             person_data = {'name': name, 'pict':filename,  'date':date, 'location':(top,right,bottom,left), 'percentage_and_symbol': percentage_and_symbol}
  1054                                             person_data_list.append(person_data)
  1055                                             frame_datas = {'img':resized_frame, 'face_location_list':face_location_list, 'overlay': overlay, 'person_data_list': person_data_list}
  1056                                             frame_datas_array.append(frame_datas)
  1057                                             """
  1058   1982.3 MiB      0.0 MiB           1       face_names = []
  1059   1982.3 MiB      0.0 MiB           1       face_location_list = []
  1060   1982.3 MiB      0.0 MiB           1       number_of_crops = 0
  1061   1982.3 MiB      0.0 MiB           1       filename = ''
  1062   1982.3 MiB      0.0 MiB           1       debug_frame_turn_count = 0
  1063   1982.3 MiB      0.0 MiB           1       modified_frame_list = []
  1064                                         
  1065   1982.3 MiB      0.0 MiB           2       for frame_data in frame_datas_array:
  1066                                                 """DEBUG"""
  1067                                                 # debug_frame_turn_count += 1; print('*******',debug_frame_turn_count, '周目*******')
  1068   1982.3 MiB      0.0 MiB           1           if "face_location_list" not in frame_data:
  1069                                                     if args_dict["headless"] == False:
  1070                                                         # 半透明処理（後半）_1frameに対して1回
  1071                                                         if args_dict["show_overlay"]==True:
  1072                                                             cv2.addWeighted(frame_data["overlay"], global_memory["alpha"], frame_data["img"], 1-global_memory["alpha"], 0, frame_data["img"])
  1073                                                     continue
  1074                                         
  1075   1982.3 MiB      0.0 MiB           1           resized_frame = frame_data["img"]
  1076   1982.3 MiB      0.0 MiB           1           face_location_list = frame_data["face_location_list"]
  1077   1982.3 MiB      0.0 MiB           1           overlay = frame_data["overlay"]
  1078   1982.3 MiB      0.0 MiB           1           person_data_list = frame_data["person_data_list"]
  1079   1982.3 MiB      0.0 MiB           1           date = datetime.datetime.now().strftime("%Y,%m,%d,%H,%M,%S,%f")
  1080                                         
  1081                                                 # 名前リスト作成
  1082   1982.3 MiB      0.0 MiB           3           for face_encoding in face_encodings:
  1083                                                     # Initialize name, matches (Inner frame)
  1084   1982.3 MiB      0.0 MiB           2               name = "Unknown"
  1085   1982.3 MiB      0.0 MiB           2               matches = check_compare_faces(args_dict["known_face_encodings"], face_encoding, args_dict["tolerance"])
  1086                                                     # 名前リスト(face_names)生成
  1087   1982.3 MiB      0.0 MiB           2               face_names = return_face_names(args_dict, face_names, face_encoding,  matches, name)
  1088                                         
  1089                                                 # face_location_listについて繰り返し処理→frame_datas_array作成
  1090   1982.3 MiB      0.0 MiB           1           number_of_people = 0  # 人数。計算上0人から始める。draw_default_face()で使用する
  1091   1982.3 MiB      0.0 MiB           3           for (top, right, bottom, left), name in zip(face_location_list, face_names):
  1092   1982.3 MiB      0.0 MiB           2               person_data = defaultdict(int)
  1093   1982.3 MiB      0.0 MiB           2               if name == 'Unknown':
  1094                                                         percentage_and_symbol: str = ''
  1095                                                         dis: str = ''
  1096                                                         p: float = 1.0
  1097                                                     else:  # nameが誰かの名前の場合
  1098                                                         distance: str
  1099   1982.3 MiB      0.0 MiB           2                   name, distance = name.split(':')
  1100                                                         # パーセンテージの算出
  1101   1982.3 MiB      0.0 MiB           2                   dis = str(round(float(distance), 2))
  1102   1982.3 MiB      0.0 MiB           2                   p = float(distance)
  1103                                                         # return_percentage(p)
  1104   1982.3 MiB      0.0 MiB           2                   percentage = return_percentage(p)
  1105   1982.3 MiB      0.0 MiB           2                   percentage = round(percentage, 1)
  1106   1982.3 MiB      0.0 MiB           2                   percentage_and_symbol = str(percentage) + '%'
  1107                                                         # ファイル名を最初のアンダーバーで区切る（アンダーバーは複数なのでmaxsplit = 1）
  1108   1982.3 MiB      0.0 MiB           2                   try:
  1109   1982.3 MiB      0.0 MiB           2                       name, _ = name.split('_', maxsplit = 1)
  1110                                                         except:
  1111                                                             """TODO
  1112                                                             logger warn level"""
  1113                                                             sg.popup_error('ファイル名に異常が見つかりました',name,'NAME_default.png あるいはNAME_001.png (001部分は001からはじまる連番)にしてください','noFaceフォルダに移動します')
  1114                                                             move(name, './noFace/')
  1115                                                             return
  1116                                         
  1117                                         
  1118                                                     # クロップ画像保存
  1119   1982.3 MiB      0.0 MiB           2               if args_dict["crop_face_image"]==True:
  1120   1982.3 MiB      0.0 MiB           2                   if args_dict["frequency_crop_image"] < number_of_crops:
  1121                                                             pil_img_obj_rgb = pil_img_rgb_instance(resized_frame)
  1122                                                             filename,number_of_crops, frequency_crop_image = \
  1123                                                                 make_crop_face_image(name, dis, pil_img_obj_rgb, top, left, right, bottom, number_of_crops, args_dict["frequency_crop_image"])
  1124                                                             number_of_crops = 0
  1125                                                         else:
  1126   1982.3 MiB      0.0 MiB           2                       number_of_crops += 1
  1127                                         
  1128                                                     # 描画系
  1129   1982.3 MiB      0.0 MiB           2               if args_dict["headless"] == False:
  1130                                                         # デフォルト顔画像の描画
  1131   1982.3 MiB      0.0 MiB           2                   if p <= args_dict["tolerance"]:  # ディスタンスpがtolerance以下の場合
  1132   1982.3 MiB      0.0 MiB           2                       if args_dict["default_face_image_draw"] == True:
  1133   1982.3 MiB      0.0 MiB           2                           resized_frame = draw_default_face(args_dict, name, resized_frame, number_of_people)
  1134   1982.3 MiB      0.0 MiB           2                           number_of_people += 1  # 何人目か
  1135                                                                 """DEBUG"""
  1136                                                                 # frame_imshow_for_debug(resized_frame)
  1137                                         
  1138                                                         # ピンクまたは白の四角形描画
  1139   1982.3 MiB      0.0 MiB           2                   if args_dict["rectangle"] == True:
  1140                                                             if name == 'Unknown':  # プリセット顔画像に対応する顔画像がなかった場合
  1141                                                                 resized_frame = draw_pink_rectangle(resized_frame, top,bottom,left,right)
  1142                                                             else:  # プリセット顔画像に対応する顔画像があった場合
  1143                                                                 resized_frame = draw_white_rectangle(args_dict["rectangle"], resized_frame, top, left, right, bottom)
  1144                                                             
  1145                                                         # パーセンテージ描画
  1146   1982.3 MiB      0.0 MiB           2                   if args_dict["show_percentage"]==True:
  1147   1982.3 MiB      0.0 MiB           2                       resized_frame = display_percentage(percentage_and_symbol,resized_frame, p, left, right, bottom, args_dict["tolerance"])
  1148                                                             """DEBUG"""
  1149                                                             # frame_imshow_for_debug(resized_frame)
  1150                                         
  1151                                                         # 名前表示と名前用四角形の描画
  1152   1982.3 MiB      0.0 MiB           2                   if args_dict["show_name"]==True:
  1153   1982.3 MiB      0.0 MiB           2                       resized_frame = draw_rectangle_for_name(name,resized_frame, left, right,bottom)
  1154   1982.3 MiB      0.0 MiB           2                       pil_img_obj= Image.fromarray(resized_frame)
  1155   1982.3 MiB      0.1 MiB           2                       resized_frame = draw_text_for_name(left,right,bottom,name, p,args_dict["tolerance"],pil_img_obj)
  1156                                                             """DEBUG"""
  1157                                                             # frame_imshow_for_debug(resized_frame)
  1158                                         
  1159                                                         # target_rectangleの描画
  1160   1982.3 MiB      0.0 MiB           2                   if args_dict["target_rectangle"] == True:
  1161   1982.3 MiB      0.0 MiB           2                       resized_frame = draw_target_rectangle(args_dict["rect01_png"], resized_frame,top,bottom,left,right,name)
  1162                                                             """DEBUG"""
  1163                                                             # frame_imshow_for_debug(resized_frame)
  1164                                         
  1165                                                         """1.3.06でボトムエリア描画は廃止予定
  1166                                                         if args_dict["bottom_area"] == True:
  1167                                                             resized_frame = draw_bottom_area_rectangle(name,args_dict["bottom_area"], args_dict["set_height"], args_dict["set_width"], resized_frame)
  1168                                         
  1169                                                         # bottom_area中の描画
  1170                                                         if args_dict["bottom_area"]==True:
  1171                                                             unregistered_face_image, resized_frame = draw_bottom_area(args_dict, name,resized_frame)
  1172                                                             # name等描画
  1173                                                             inner_bottom_area_char_left = 200
  1174                                                             inner_bottom_area_char_top = args_dict["set_height"] + 30
  1175                                                             draw  =  make_draw_object(resized_frame)
  1176                                                             draw_text_in_bottom_area(draw, inner_bottom_area_char_left, inner_bottom_area_char_top,name,percentage_and_symbol,date)
  1177                                                             resized_frame = convert_pil_img_to_ndarray(pil_img_obj)
  1178                                                         """
  1179                                         
  1180   1982.3 MiB      0.0 MiB           2               person_data = {'name': name, 'pict':filename,  'date':date, 'location':(top,right,bottom,left), 'percentage_and_symbol': percentage_and_symbol}
  1181   1982.3 MiB      0.0 MiB           2               person_data_list.append(person_data)
  1182                                                 # End for (top, right, bottom, left), name in zip(face_location_list, face_names)
  1183                                         
  1184                                                 # _1frameに対して1回
  1185   1982.3 MiB      0.0 MiB           1           if args_dict["headless"] == False:
  1186   1982.3 MiB      0.0 MiB           1               frame_datas = {'img':resized_frame, 'face_location_list':face_location_list, 'overlay': overlay, 'person_data_list': person_data_list}
  1187                                                     """DEBUG"""
  1188                                                     # frame_imshow_for_debug(resized_frame)
  1189                                                     # frame_datas_array.append(frame_datas)
  1190   1982.3 MiB      0.0 MiB           1               modified_frame_list.append(frame_datas)
  1191                                         
  1192                                                 elif args_dict["headless"] == True:
  1193                                                     frame_datas = {'img':'no-data_img', 'face_location_list':face_location_list, 'overlay': overlay, 'person_data_list': person_data_list}  # TypeError: list indices must be integers or slices, not str -> img
  1194                                                     # frame_datas_array.append(frame_datas)
  1195                                                     modified_frame_list.append(frame_datas)
  1196                                                 else:
  1197                                                     frame_datas = {'img':'no-data_img', 'face_location_list':face_location_list, 'overlay': overlay, 'person_data_list': 'no-data_person_data_list'} 
  1198                                                     # frame_datas_array.append(frame_datas)
  1199                                                     modified_frame_list.append(frame_datas)
  1200                                         
  1201   1982.3 MiB      0.0 MiB           1           if args_dict["headless"] == False:
  1202                                                     # 半透明処理（後半）_1frameに対して1回
  1203   1982.3 MiB      0.0 MiB           1               if args_dict["show_overlay"]==True:
  1204                                                         # cv2.addWeighted(overlay, global_memory["alpha"], resized_frame, 1-global_memory["alpha"], 0, resized_frame)
  1205   1982.3 MiB      0.0 MiB           2                   for modified_frame in modified_frame_list:
  1206   1982.3 MiB      0.0 MiB           1                       cv2.addWeighted(modified_frame["overlay"], global_memory["alpha"], modified_frame["img"], 1-global_memory["alpha"], 0, modified_frame["img"])
  1207                                                         # """DEBUG"""
  1208                                                         # frame_imshow_for_debug(resized_frame)
  1209                                                 
  1210                                             # return frame_datas
  1211   1982.3 MiB      0.0 MiB           1       print(f"modified_frame_list: {modified_frame_list.__sizeof__()}")
  1212   1982.3 MiB      0.0 MiB           1       return modified_frame_list
  1213                                         
  1214                                             """機能停止
  1215                                             # yield出力ブロック ===================================
  1216                                             ## パイプ出力機構も含む
  1217                                             ## TODO: frame_datas_arrayから値を取り出す処理に変えること
  1218                                             if not frame_datas == None:
  1219                                                 if output_frame_data == True:  ## pipe出力時
  1220                                                     # frame_datas['stream'] = resized_frame
  1221                                                     # yield frame_datas
  1222                                                     pass
  1223                                                 elif output_frame_data == False:  ## 通常使用時
  1224                                                     frame_datas = {'name': name, 'pict':filename,  'date':date, 'img':resized_frame, 'location':(top,right,bottom,left), 'percentage_and_symbol': percentage_and_symbol}
  1225                                                     frame_datas_array.append(frame_datas)
  1226                                                     yield frame_datas_array
  1227                                                     # sys.stdout.buffer.write(frame_datas['stream'])  ## 'stream'を出力する
  1228                                                     # print(type(resized_frame))  ## <class 'numpy.ndarray'>
  1229                                                     # print(type(frame_datas['stream']))  ## <class 'numpy.ndarray'>
  1230                                         
  1231                                                     # cv2.imshow('FACE01', frame_datas['stream'])
  1232                                                     # if cv2.waitKey(1) & 0xFF == ord('q'):
  1233                                                     #     break
  1234                                             # =====================================================
  1235                                         
  1236                                             # パイプ使用時の必要情報を表示 ========
  1237                                             if print_property==True:
  1238                                                 print('fps: ', fps)
  1239                                                 print('frame shape: ', resized_frame.shape)  ## (450, 800, 3)
  1240                                                 print('dtype: ', resized_frame.dtype)  ## uint8
  1241                                                 print('frame size: ', resized_frame.size) ## 1080000←450*800*3
  1242                                                 exit()
  1243                                             # =====================================
  1244                                             """


exec_times: 1
メモリプロファイリング中
メモリプロファイリング中
Filename: /home/terms/bin/FACE01/FACE01.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
  1007   1986.9 MiB   1986.9 MiB           1   @profile()
  1008                                         def face_encoding_process(args_dict, frame_datas_array):
  1009                                             """frame_datas_arrayの定義
  1010                                             person_data = {'name': name, 'pict':filename,  'date':date, 'location':(top,right,bottom,left), 'percentage_and_symbol': percentage_and_symbol}
  1011                                             person_data_list.append(person_data)
  1012                                             frame_datas = {'img':resized_frame, 'face_location_list':face_location_list, 'overlay': overlay, 'person_data_list': person_data_list}
  1013                                             frame_datas_array.append(frame_datas)
  1014                                             """
  1015   1986.9 MiB      0.0 MiB           1       face_encodings = []
  1016   1986.9 MiB      0.0 MiB           1       for frame_data in frame_datas_array:
  1017   1986.9 MiB      0.0 MiB           1           resized_frame = frame_data["img"]
  1018   1986.9 MiB      0.0 MiB           1           face_location_list = frame_data["face_location_list"]  # [(139, 190, 257, 72)]
  1019   1986.9 MiB      0.0 MiB           1           if len(face_location_list) == 0:
  1020                                                     return face_encodings, frame_datas_array
  1021   1986.9 MiB      0.0 MiB           1           elif len(face_location_list) > 0:
  1022                                                     # 顔ロケーションからエンコーディングを求める
  1023   1986.9 MiB      0.0 MiB           1               if args_dict["use_mediapipe"] == True and  args_dict["person_frame_face_encoding"] == True:
  1024                                                         """FIX
  1025                                                         人数分を繰り返し処理しているので時間がかかる。
  1026                                                         dlibは一つの画像に複数の座標を与えて一度に処理をする。
  1027                                                         なので各person_frameをくっつけて一つの画像にすれば処理時間は短くなる。
  1028                                                             numpy.hstack(tup)[source]
  1029                                                             Stack arrays in sequence horizontally (column wise).
  1030                                                             https://numpy.org/doc/stable/reference/generated/numpy.hstack.html
  1031                                                         """
  1032                                                         concatenate_face_location_list, concatenate_person_frame = \
  1033                                                             return_concatenate_location_and_frame(resized_frame, face_location_list)
  1034                                                         face_encodings = faceapi.face_encodings(concatenate_person_frame, concatenate_face_location_list, args_dict["jitters"], args_dict["model"])
  1035   1986.9 MiB      0.0 MiB           1               elif args_dict["use_mediapipe"] == True and  args_dict["person_frame_face_encoding"] == False:
  1036   1986.9 MiB      0.0 MiB           1                   face_encodings = faceapi.face_encodings(resized_frame, face_location_list, args_dict["jitters"], args_dict["model"])
  1037                                                     elif args_dict["use_mediapipe"] == False and  args_dict["person_frame_face_encoding"] == True:
  1038                                                         logger_warning("\n---------------------------------")
  1039                                                         logger_warning("config.ini:")
  1040                                                         logger_warning("mediapipe = False  の場合 person_frame_face_encoding = True  には出来ません")
  1041                                                         logger_warning("システム管理者へ連絡の後、設定を変更してください")
  1042                                                         logger_warning("処理を終了します")
  1043                                                         logger_warning("---------------------------------")
  1044                                                         quit()
  1045                                                     elif args_dict["use_mediapipe"] == False and args_dict["person_frame_face_encoding"] == False:
  1046                                                         face_encodings = faceapi.face_encodings(resized_frame, face_location_list, args_dict["jitters"], args_dict["model"])
  1047   1986.9 MiB      0.0 MiB           1           return face_encodings, frame_datas_array


modified_frame_list: 72
Filename: /home/terms/bin/FACE01/FACE01.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
  1050   1986.9 MiB   1986.9 MiB           1   @profile()
  1051                                         def frame_post_processing(args_dict, face_encodings, frame_datas_array):
  1052                                             """frame_datas_arrayの定義
  1053                                             person_data = {'name': name, 'pict':filename,  'date':date, 'location':(top,right,bottom,left), 'percentage_and_symbol': percentage_and_symbol}
  1054                                             person_data_list.append(person_data)
  1055                                             frame_datas = {'img':resized_frame, 'face_location_list':face_location_list, 'overlay': overlay, 'person_data_list': person_data_list}
  1056                                             frame_datas_array.append(frame_datas)
  1057                                             """
  1058   1986.9 MiB      0.0 MiB           1       face_names = []
  1059   1986.9 MiB      0.0 MiB           1       face_location_list = []
  1060   1986.9 MiB      0.0 MiB           1       number_of_crops = 0
  1061   1986.9 MiB      0.0 MiB           1       filename = ''
  1062   1986.9 MiB      0.0 MiB           1       debug_frame_turn_count = 0
  1063   1986.9 MiB      0.0 MiB           1       modified_frame_list = []
  1064                                         
  1065   1987.0 MiB      0.0 MiB           2       for frame_data in frame_datas_array:
  1066                                                 """DEBUG"""
  1067                                                 # debug_frame_turn_count += 1; print('*******',debug_frame_turn_count, '周目*******')
  1068   1986.9 MiB      0.0 MiB           1           if "face_location_list" not in frame_data:
  1069                                                     if args_dict["headless"] == False:
  1070                                                         # 半透明処理（後半）_1frameに対して1回
  1071                                                         if args_dict["show_overlay"]==True:
  1072                                                             cv2.addWeighted(frame_data["overlay"], global_memory["alpha"], frame_data["img"], 1-global_memory["alpha"], 0, frame_data["img"])
  1073                                                     continue
  1074                                         
  1075   1986.9 MiB      0.0 MiB           1           resized_frame = frame_data["img"]
  1076   1986.9 MiB      0.0 MiB           1           face_location_list = frame_data["face_location_list"]
  1077   1986.9 MiB      0.0 MiB           1           overlay = frame_data["overlay"]
  1078   1986.9 MiB      0.0 MiB           1           person_data_list = frame_data["person_data_list"]
  1079   1986.9 MiB      0.0 MiB           1           date = datetime.datetime.now().strftime("%Y,%m,%d,%H,%M,%S,%f")
  1080                                         
  1081                                                 # 名前リスト作成
  1082   1986.9 MiB      0.0 MiB           3           for face_encoding in face_encodings:
  1083                                                     # Initialize name, matches (Inner frame)
  1084   1986.9 MiB      0.0 MiB           2               name = "Unknown"
  1085   1986.9 MiB      0.0 MiB           2               matches = check_compare_faces(args_dict["known_face_encodings"], face_encoding, args_dict["tolerance"])
  1086                                                     # 名前リスト(face_names)生成
  1087   1986.9 MiB      0.0 MiB           2               face_names = return_face_names(args_dict, face_names, face_encoding,  matches, name)
  1088                                         
  1089                                                 # face_location_listについて繰り返し処理→frame_datas_array作成
  1090   1986.9 MiB      0.0 MiB           1           number_of_people = 0  # 人数。計算上0人から始める。draw_default_face()で使用する
  1091   1987.0 MiB      0.0 MiB           3           for (top, right, bottom, left), name in zip(face_location_list, face_names):
  1092   1987.0 MiB      0.0 MiB           2               person_data = defaultdict(int)
  1093   1987.0 MiB      0.0 MiB           2               if name == 'Unknown':
  1094                                                         percentage_and_symbol: str = ''
  1095                                                         dis: str = ''
  1096                                                         p: float = 1.0
  1097                                                     else:  # nameが誰かの名前の場合
  1098                                                         distance: str
  1099   1987.0 MiB      0.0 MiB           2                   name, distance = name.split(':')
  1100                                                         # パーセンテージの算出
  1101   1987.0 MiB      0.0 MiB           2                   dis = str(round(float(distance), 2))
  1102   1987.0 MiB      0.0 MiB           2                   p = float(distance)
  1103                                                         # return_percentage(p)
  1104   1987.0 MiB      0.0 MiB           2                   percentage = return_percentage(p)
  1105   1987.0 MiB      0.0 MiB           2                   percentage = round(percentage, 1)
  1106   1987.0 MiB      0.0 MiB           2                   percentage_and_symbol = str(percentage) + '%'
  1107                                                         # ファイル名を最初のアンダーバーで区切る（アンダーバーは複数なのでmaxsplit = 1）
  1108   1987.0 MiB      0.0 MiB           2                   try:
  1109   1987.0 MiB      0.0 MiB           2                       name, _ = name.split('_', maxsplit = 1)
  1110                                                         except:
  1111                                                             """TODO
  1112                                                             logger warn level"""
  1113                                                             sg.popup_error('ファイル名に異常が見つかりました',name,'NAME_default.png あるいはNAME_001.png (001部分は001からはじまる連番)にしてください','noFaceフォルダに移動します')
  1114                                                             move(name, './noFace/')
  1115                                                             return
  1116                                         
  1117                                         
  1118                                                     # クロップ画像保存
  1119   1987.0 MiB      0.0 MiB           2               if args_dict["crop_face_image"]==True:
  1120   1987.0 MiB      0.0 MiB           2                   if args_dict["frequency_crop_image"] < number_of_crops:
  1121                                                             pil_img_obj_rgb = pil_img_rgb_instance(resized_frame)
  1122                                                             filename,number_of_crops, frequency_crop_image = \
  1123                                                                 make_crop_face_image(name, dis, pil_img_obj_rgb, top, left, right, bottom, number_of_crops, args_dict["frequency_crop_image"])
  1124                                                             number_of_crops = 0
  1125                                                         else:
  1126   1987.0 MiB      0.0 MiB           2                       number_of_crops += 1
  1127                                         
  1128                                                     # 描画系
  1129   1987.0 MiB      0.0 MiB           2               if args_dict["headless"] == False:
  1130                                                         # デフォルト顔画像の描画
  1131   1987.0 MiB      0.0 MiB           2                   if p <= args_dict["tolerance"]:  # ディスタンスpがtolerance以下の場合
  1132   1987.0 MiB      0.0 MiB           2                       if args_dict["default_face_image_draw"] == True:
  1133   1987.0 MiB      0.0 MiB           2                           resized_frame = draw_default_face(args_dict, name, resized_frame, number_of_people)
  1134   1987.0 MiB      0.0 MiB           2                           number_of_people += 1  # 何人目か
  1135                                                                 """DEBUG"""
  1136                                                                 # frame_imshow_for_debug(resized_frame)
  1137                                         
  1138                                                         # ピンクまたは白の四角形描画
  1139   1987.0 MiB      0.0 MiB           2                   if args_dict["rectangle"] == True:
  1140                                                             if name == 'Unknown':  # プリセット顔画像に対応する顔画像がなかった場合
  1141                                                                 resized_frame = draw_pink_rectangle(resized_frame, top,bottom,left,right)
  1142                                                             else:  # プリセット顔画像に対応する顔画像があった場合
  1143                                                                 resized_frame = draw_white_rectangle(args_dict["rectangle"], resized_frame, top, left, right, bottom)
  1144                                                             
  1145                                                         # パーセンテージ描画
  1146   1987.0 MiB      0.0 MiB           2                   if args_dict["show_percentage"]==True:
  1147   1987.0 MiB      0.0 MiB           2                       resized_frame = display_percentage(percentage_and_symbol,resized_frame, p, left, right, bottom, args_dict["tolerance"])
  1148                                                             """DEBUG"""
  1149                                                             # frame_imshow_for_debug(resized_frame)
  1150                                         
  1151                                                         # 名前表示と名前用四角形の描画
  1152   1987.0 MiB      0.0 MiB           2                   if args_dict["show_name"]==True:
  1153   1987.0 MiB      0.0 MiB           2                       resized_frame = draw_rectangle_for_name(name,resized_frame, left, right,bottom)
  1154   1987.0 MiB      0.0 MiB           2                       pil_img_obj= Image.fromarray(resized_frame)
  1155   1987.0 MiB      0.1 MiB           2                       resized_frame = draw_text_for_name(left,right,bottom,name, p,args_dict["tolerance"],pil_img_obj)
  1156                                                             """DEBUG"""
  1157                                                             # frame_imshow_for_debug(resized_frame)
  1158                                         
  1159                                                         # target_rectangleの描画
  1160   1987.0 MiB      0.0 MiB           2                   if args_dict["target_rectangle"] == True:
  1161   1987.0 MiB      0.0 MiB           2                       resized_frame = draw_target_rectangle(args_dict["rect01_png"], resized_frame,top,bottom,left,right,name)
  1162                                                             """DEBUG"""
  1163                                                             # frame_imshow_for_debug(resized_frame)
  1164                                         
  1165                                                         """1.3.06でボトムエリア描画は廃止予定
  1166                                                         if args_dict["bottom_area"] == True:
  1167                                                             resized_frame = draw_bottom_area_rectangle(name,args_dict["bottom_area"], args_dict["set_height"], args_dict["set_width"], resized_frame)
  1168                                         
  1169                                                         # bottom_area中の描画
  1170                                                         if args_dict["bottom_area"]==True:
  1171                                                             unregistered_face_image, resized_frame = draw_bottom_area(args_dict, name,resized_frame)
  1172                                                             # name等描画
  1173                                                             inner_bottom_area_char_left = 200
  1174                                                             inner_bottom_area_char_top = args_dict["set_height"] + 30
  1175                                                             draw  =  make_draw_object(resized_frame)
  1176                                                             draw_text_in_bottom_area(draw, inner_bottom_area_char_left, inner_bottom_area_char_top,name,percentage_and_symbol,date)
  1177                                                             resized_frame = convert_pil_img_to_ndarray(pil_img_obj)
  1178                                                         """
  1179                                         
  1180   1987.0 MiB      0.0 MiB           2               person_data = {'name': name, 'pict':filename,  'date':date, 'location':(top,right,bottom,left), 'percentage_and_symbol': percentage_and_symbol}
  1181   1987.0 MiB      0.0 MiB           2               person_data_list.append(person_data)
  1182                                                 # End for (top, right, bottom, left), name in zip(face_location_list, face_names)
  1183                                         
  1184                                                 # _1frameに対して1回
  1185   1987.0 MiB      0.0 MiB           1           if args_dict["headless"] == False:
  1186   1987.0 MiB      0.0 MiB           1               frame_datas = {'img':resized_frame, 'face_location_list':face_location_list, 'overlay': overlay, 'person_data_list': person_data_list}
  1187                                                     """DEBUG"""
  1188                                                     # frame_imshow_for_debug(resized_frame)
  1189                                                     # frame_datas_array.append(frame_datas)
  1190   1987.0 MiB      0.0 MiB           1               modified_frame_list.append(frame_datas)
  1191                                         
  1192                                                 elif args_dict["headless"] == True:
  1193                                                     frame_datas = {'img':'no-data_img', 'face_location_list':face_location_list, 'overlay': overlay, 'person_data_list': person_data_list}  # TypeError: list indices must be integers or slices, not str -> img
  1194                                                     # frame_datas_array.append(frame_datas)
  1195                                                     modified_frame_list.append(frame_datas)
  1196                                                 else:
  1197                                                     frame_datas = {'img':'no-data_img', 'face_location_list':face_location_list, 'overlay': overlay, 'person_data_list': 'no-data_person_data_list'} 
  1198                                                     # frame_datas_array.append(frame_datas)
  1199                                                     modified_frame_list.append(frame_datas)
  1200                                         
  1201   1987.0 MiB      0.0 MiB           1           if args_dict["headless"] == False:
  1202                                                     # 半透明処理（後半）_1frameに対して1回
  1203   1987.0 MiB      0.0 MiB           1               if args_dict["show_overlay"]==True:
  1204                                                         # cv2.addWeighted(overlay, global_memory["alpha"], resized_frame, 1-global_memory["alpha"], 0, resized_frame)
  1205   1987.0 MiB      0.0 MiB           2                   for modified_frame in modified_frame_list:
  1206   1987.0 MiB      0.0 MiB           1                       cv2.addWeighted(modified_frame["overlay"], global_memory["alpha"], modified_frame["img"], 1-global_memory["alpha"], 0, modified_frame["img"])
  1207                                                         # """DEBUG"""
  1208                                                         # frame_imshow_for_debug(resized_frame)
  1209                                                 
  1210                                             # return frame_datas
  1211   1987.0 MiB      0.0 MiB           1       print(f"modified_frame_list: {modified_frame_list.__sizeof__()}")
  1212   1987.0 MiB      0.0 MiB           1       return modified_frame_list
  1213                                         
  1214                                             """機能停止
  1215                                             # yield出力ブロック ===================================
  1216                                             ## パイプ出力機構も含む
  1217                                             ## TODO: frame_datas_arrayから値を取り出す処理に変えること
  1218                                             if not frame_datas == None:
  1219                                                 if output_frame_data == True:  ## pipe出力時
  1220                                                     # frame_datas['stream'] = resized_frame
  1221                                                     # yield frame_datas
  1222                                                     pass
  1223                                                 elif output_frame_data == False:  ## 通常使用時
  1224                                                     frame_datas = {'name': name, 'pict':filename,  'date':date, 'img':resized_frame, 'location':(top,right,bottom,left), 'percentage_and_symbol': percentage_and_symbol}
  1225                                                     frame_datas_array.append(frame_datas)
  1226                                                     yield frame_datas_array
  1227                                                     # sys.stdout.buffer.write(frame_datas['stream'])  ## 'stream'を出力する
  1228                                                     # print(type(resized_frame))  ## <class 'numpy.ndarray'>
  1229                                                     # print(type(frame_datas['stream']))  ## <class 'numpy.ndarray'>
  1230                                         
  1231                                                     # cv2.imshow('FACE01', frame_datas['stream'])
  1232                                                     # if cv2.waitKey(1) & 0xFF == ord('q'):
  1233                                                     #     break
  1234                                             # =====================================================
  1235                                         
  1236                                             # パイプ使用時の必要情報を表示 ========
  1237                                             if print_property==True:
  1238                                                 print('fps: ', fps)
  1239                                                 print('frame shape: ', resized_frame.shape)  ## (450, 800, 3)
  1240                                                 print('dtype: ', resized_frame.dtype)  ## uint8
  1241                                                 print('frame size: ', resized_frame.size) ## 1080000←450*800*3
  1242                                                 exit()
  1243                                             # =====================================
  1244                                             """


プロファイリングを終了します
profile()関数の処理時間合計: 2.951[秒]
